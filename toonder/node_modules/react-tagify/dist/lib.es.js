import React from "react";
const detectType = (str) => {
  if (str.startsWith("#"))
    return "tag";
  if (str.startsWith("@"))
    return "mention";
  return null;
};
const signRemover = (str) => {
  if (str.startsWith("#"))
    return str.slice(1);
  if (str.startsWith("@"))
    return str.slice(1);
  return str;
};
const getMatchedType = (args) => {
  const matchers = [
    { type: "hashtag", pattern: /#[a-zA-Z0-9_]+/g },
    { type: "mention", pattern: /@[a-zA-Z0-9_]+/g }
  ];
  for (const matcher of matchers) {
    if (matcher.pattern.test(args.text)) {
      if (matcher.type === "hashtag" && args.detectHashtags || matcher.type === "mention" && args.detectMentions) {
        return matcher.type;
      }
    }
  }
  return null;
};
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2["_" + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
      return test2[n2];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
shouldUseNative() ? Object.assign : function(target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f = React, g = 60103;
reactJsxRuntime_production_min.Fragment = 60107;
if ("function" === typeof Symbol && Symbol.for) {
  var h = Symbol.for;
  g = h("react.element");
  reactJsxRuntime_production_min.Fragment = h("react.fragment");
}
var m = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, n = Object.prototype.hasOwnProperty, p = { key: true, ref: true, __self: true, __source: true };
function q(c, a, k) {
  var b, d = {}, e = null, l = null;
  void 0 !== k && (e = "" + k);
  void 0 !== a.key && (e = "" + a.key);
  void 0 !== a.ref && (l = a.ref);
  for (b in a)
    n.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
  if (c && c.defaultProps)
    for (b in a = c.defaultProps, a)
      void 0 === d[b] && (d[b] = a[b]);
  return { $$typeof: g, type: c, key: e, ref: l, props: d, _owner: m.current };
}
reactJsxRuntime_production_min.jsx = q;
reactJsxRuntime_production_min.jsxs = q;
{
  jsxRuntime.exports = reactJsxRuntime_production_min;
}
const jsx = jsxRuntime.exports.jsx;
const Fragment = jsxRuntime.exports.Fragment;
const SpanElement = (props) => {
  const defaultStyle = {
    color: props.color,
    cursor: props.onClick ? "pointer" : "default"
  };
  const spanStyle = props.style || defaultStyle;
  return /* @__PURE__ */ jsx("span", {
    style: spanStyle,
    onClick: () => (props == null ? void 0 : props.onClick) && props.onClick(signRemover(props.text), detectType(props.text)),
    children: props.text
  });
};
const Tagify = ({
  children = /* @__PURE__ */ jsx(Fragment, {}),
  color = "#0073e6",
  onClick,
  tagStyle,
  mentionStyle,
  detectHashtags = true,
  detectMentions = true
}) => {
  const processText = (input) => {
    const splitted = input.split(" ");
    const tagifiedText = [];
    splitted.forEach((text, index) => {
      const matchedType = getMatchedType({
        text,
        detectHashtags,
        detectMentions
      });
      const styleMap = {
        hashtag: tagStyle,
        mention: mentionStyle
      };
      if (matchedType) {
        tagifiedText.push(/* @__PURE__ */ jsx(SpanElement, {
          text,
          color,
          style: styleMap[matchedType],
          onClick
        }, `${text}-${index}`));
      } else {
        tagifiedText.push(text);
      }
      if (index < splitted.length - 1) {
        tagifiedText.push(" ");
      }
    });
    return tagifiedText;
  };
  const processChildren = (child) => {
    if (React.isValidElement(child)) {
      const {
        children: childContent
      } = child.props;
      if (typeof childContent === "string") {
        return React.cloneElement(child, {
          children: processText(childContent)
        });
      }
    } else if (typeof child === "string") {
      return /* @__PURE__ */ jsx(Fragment, {
        children: processText(child)
      });
    }
    return child;
  };
  const processedChildren = React.Children.map(children, processChildren);
  return /* @__PURE__ */ jsx(Fragment, {
    children: processedChildren
  });
};
export { Tagify };
