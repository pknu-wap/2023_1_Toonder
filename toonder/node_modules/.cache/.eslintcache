[{"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/index.js":"1","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/App.js":"2","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid_after.js":"3","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid.js":"4","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonInfo.js":"5","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonList.js":"6","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/freeboard.js":"7","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/newpw.js":"8","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/login/login.js":"9","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findpw.js":"10","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/main_page.js":"11","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/infoChange.js":"12","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/join/join.js":"13","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mypage.js":"14","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackSmall.js":"15","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/ID_background.js":"16","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/supabase.js":"17","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackground.js":"18","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/backGround.js":"19","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/write.js":"20","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/postview.js":"21","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/modal.js":"22"},{"size":185,"mtime":1685814123826,"results":"23","hashOfConfig":"24"},{"size":1778,"mtime":1686061907555,"results":"25","hashOfConfig":"24"},{"size":850,"mtime":1685814123816,"results":"26","hashOfConfig":"24"},{"size":956,"mtime":1685814123816,"results":"27","hashOfConfig":"24"},{"size":8276,"mtime":1686077169490,"results":"28","hashOfConfig":"24"},{"size":5661,"mtime":1685953560580,"results":"29","hashOfConfig":"24"},{"size":4057,"mtime":1686061907556,"results":"30","hashOfConfig":"24"},{"size":4371,"mtime":1685953581315,"results":"31","hashOfConfig":"24"},{"size":5398,"mtime":1685953581317,"results":"32","hashOfConfig":"24"},{"size":3340,"mtime":1685953581314,"results":"33","hashOfConfig":"24"},{"size":5880,"mtime":1686061907559,"results":"34","hashOfConfig":"24"},{"size":8595,"mtime":1685953940119,"results":"35","hashOfConfig":"24"},{"size":8960,"mtime":1685953581317,"results":"36","hashOfConfig":"24"},{"size":5915,"mtime":1686061929941,"results":"37","hashOfConfig":"24"},{"size":6227,"mtime":1686061907555,"results":"38","hashOfConfig":"24"},{"size":494,"mtime":1685814123816,"results":"39","hashOfConfig":"24"},{"size":486,"mtime":1685814123818,"results":"40","hashOfConfig":"24"},{"size":1096,"mtime":1686061907555,"results":"41","hashOfConfig":"24"},{"size":910,"mtime":1685814123816,"results":"42","hashOfConfig":"24"},{"size":2526,"mtime":1686084307915,"results":"43","hashOfConfig":"24"},{"size":10536,"mtime":1686091214348,"results":"44","hashOfConfig":"24"},{"size":457,"mtime":1686061907559,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1l67g9a",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"49"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"49"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"49"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"49"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"49"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"49"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"49"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/index.js",[],[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/App.js",["128","129","130"],[],"import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Join from './component/join/join';\nimport React, { useEffect, useState } from 'react';\nimport Newpw from './component/find/newpw';\nimport Findpw from './component/find/findpw';\nimport Login from './component/login/login';\nimport Mainpage from './component/main/main_page';\nimport MainWebtoonList from './component/main/mainWebtoonList';\nimport MainBacksmall from './component/backgrounds/mainBackSmall';\nimport MainWebtoonInfo from './component/main/mainWebtoonInfo';\nimport Mypage from './component/main/mypage';\nimport Freeboard from './component/freeboard/freeboard';\nimport InfoC from './component/main/infoChange';\nimport Write from './component/freeboard/write';\nimport PostView from './component/freeboard/postview';\nimport axios from 'axios';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Login />} />\n          <Route path=\"/main_page\" element={<Mainpage />} />\n          <Route path=\"/findpw\" element={<Findpw />} />\n          <Route path=\"/mainWebtoonList\" element={<MainWebtoonList />} />\n          <Route path=\"/mainbackground\" element={<MainBacksmall />} />\n          <Route path=\"/mainwebtooninfo\" element={<MainWebtoonInfo />} />\n          <Route path=\"/freeboard\" element={<Freeboard />} />\n          <Route path=\"/mypage\" element={<Mypage />} />\n          <Route path=\"/infochange\" element={<InfoC />} />\n          <Route path=\"/newpw\" element={<Newpw />} />\n          <Route path=\"/join\" element={<Join />} />\n          <Route path=\"/write\" element={<Write />} />\n          <Route path=\"/postview\" element={<PostView />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid_after.js",["131"],[],"import React from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport IDBackground from '../backgrounds/ID_background';\nimport styles from '../../style.css';\n\n\nfunction Findid_after() {\n  const navigate = useNavigate();\n\n  return (\n    <IDBackground text=\"Find ID\">\n      <div className=\"findid_body\">\n        <h1>이거 보이면 됨 제발 ㅜㅜ</h1>\n        <div className=\"findIdAfterButtonset\">\n          <button\n            onClick={() => {\n              navigate('/findpw');\n            }}\n            id=\"find_pw_button\">\n              비밀번호 찾기\n          </button>\n\n          <button\n            onClick={() => {\n              navigate('/');\n            }}\n            id=\"loginButton\">\n              확인\n            </button>\n          </div>\n      </div>\n    </IDBackground>\n  );\n}\n\nexport default Findid_after;\n\n",[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonInfo.js",["132","133","134","135","136","137","138"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonList.js",["139","140","141","142","143","144","145","146"],[],"import React , {useRef, useEffect, useState} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport \"./mainPage.css\";\nimport axios from 'axios';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport ex1 from \"../../images/ex1.png\"\nimport ex2 from \"../../images/ex2.png\"\nimport ex3 from \"../../images/ex3.png\"\nimport ex4 from \"../../images/ex4.png\"\nimport ex5 from \"../../images/ex5.png\"\nimport ex6 from \"../../images/ex6.png\"\nimport ex7 from \"../../images/ex7.png\"\nimport ex8 from \"../../images/ex8.png\"\nimport toTop from \"../../images/toTop.png\"\nimport MainBackSmall from '../backgrounds/mainBackSmall';\nimport { FaSpinner } from 'react-icons/fa'; // 로딩 아이콘 추가\n\nfunction MainWebtoonList() {\n  const [webtoonList, setWebToonList] = useState([])\n  const [countPage, setCountPage] = useState(1)\n  const [firstLoading, setFirstLoading] = useState(true)\n  const [isLoading, setIsLoading] = useState(true);\n  const [showNavigationToScrollTop, setShowNavigationToScrollTop] = useState(false)\n\n  const navigate = useNavigate();\n\n  function onScroll() {\n    const windowHeight =\n        window.innerHeight || document.documentElement.clientHeight;\n      const documentHeight = document.documentElement.scrollHeight;\n      const scrolledToBottom =\n        Math.ceil(window.scrollY + windowHeight) >= documentHeight;\n      \n        //console.log(window.scrollY)\n      if (window.scrollY === 0) {\n        setShowNavigationToScrollTop(false)\n      }\n      else {\n        setShowNavigationToScrollTop(true)\n      }\n\n      if (scrolledToBottom) {\n        setIsLoading(true)\n        setCountPage(countPage+1)\n      }\n  }\n  \n  useEffect(()=> {\n    //console.log(showNavigationToScrollTop)\n    if (!isLoading){\n      window.addEventListener(\"scroll\", onScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll)\n    };\n    }\n    \n    \n  })\n\n  useEffect(() => {\n    axios\n      .get('toonder/webtoon?p_num='+countPage)\n      .then(res => {\n        if (webtoonList.length === 0){\n          setIsLoading(false)\n          setWebToonList(res.data)\n          setFirstLoading(false)\n        }\n        else{\n          setIsLoading(false)\n          setWebToonList(webtoonList.concat(res.data))\n        }\n        \n      })\n  },[countPage])\n\n  const listCreator = () => {\n    var countForTrSplit = 1;\n    var trWebtoonList = [];\n    return(\n      <>\n      {firstLoading ? (\n         <div\n         style={{\n           fontSize: '30px',\n           color: 'white',\n           display: 'flex',\n           justifyContent: 'center',\n           alignItems: 'center',\n           height: '60px',\n         }}\n       >\n         <FaSpinner className=\"loadingIcon\" />\n       </div>\n      ) : (\n        <>\n        <table>\n          {\n            webtoonList.map(\n              (webtoonInfo) => {\n                if (countForTrSplit === 1) {\n                  trWebtoonList = []\n                }\n                \n                trWebtoonList.push(webtoonInfo)\n                if (countForTrSplit === 4){\n                  countForTrSplit = 1;\n                  return (\n                    <tr>\n                      \n                      <tr>\n                      {\n                        trWebtoonList.map(trWebtoonInfo => (\n                          <td>\n                            <tr>\n                              <td>\n                                <button onClick={() => {navigate('/mainwebtooninfo', {state : {mastrId : trWebtoonInfo.mastrId}});}}>\n                                  <img src={trWebtoonInfo.imageDownloadUrl} alt=\"image error\" />\n                                </button>  \n                              </td>\n                            </tr>\n                            <tr style={{height:'65px'}}>\n                              <td style={{height:'75px'}}>\n                              <p className=\"webtoonTitle\" \n                                style={{ fontSize: '18px', color: 'white', textAlign: 'center'}}>\n                                {trWebtoonInfo.title}\n                              </p>\n                              </td>\n                            </tr>\n                          </td>   \n                        ))\n                      }\n                      </tr>\n                    </tr>\n                    \n                  )\n                }\n                else {\n                  countForTrSplit += 1;\n                }\n              }\n              )\n          }\n          \n      </table>\n      {isLoading ? ( // 로딩 중일 때의 화면\n            <div\n              style={{\n                fontSize: '30px',\n                color: 'white',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '60px',\n              }}\n            >\n              <FaSpinner className=\"loadingIcon\" />\n            </div>\n          ) : (\n            <div></div>\n          )\n          }\n\n        </>\n      )\n        \n\n      }\n      \n      \n      </>\n      \n    );\n  }\n\n  return (\n    <>\n    <MainBackgorund>\n        <MainBackSmall>\n        <div className='mainWebtoonList'>\n            {listCreator()}\n        </div>\n        \n        {showNavigationToScrollTop ? (\n          <div \n          onClick={() => {window.scrollTo({ top: 0, behavior: 'smooth' })}}\n          style={{width:'50px',height:'50px',\n          position:'fixed', bottom:'10%', right:'5%',opacity:'70%'}}>\n            <img src={toTop} alt=\"To Top\" style={{height:'100%', wigth:'100%'}}/>\n        </div>):\n        null}\n        \n      \n      </MainBackSmall>\n      \n    </MainBackgorund>\n    </>\n  );\n}\n\n\nexport default MainWebtoonList;","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/freeboard.js",["147","148","149","150","151","152","153"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport './freeboard.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\nimport { FaSpinner } from 'react-icons/fa';\n\nfunction Freeboard() {\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  const [pageNum, setPageNum] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`/toonder/board?p_num=${pageNum}`);\n        setPosts(response.data);\n        let total = pageNum;\n        let hasMorePages = true;\n\n        while (hasMorePages) {\n          const response = await axios.get(`/toonder/board?p_num=${total + 1}`);\n          if (response.data.length === 0) {\n            hasMorePages = false;\n          } else {\n            total++;\n          }\n        }\n\n        setTotalPages(total);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, [pageNum]);\n\n  const goToPage = (page) => {\n    setPageNum(page);\n  };\n\n  const goToPrevPage = () => {\n    if (pageNum > 1) {\n      setPageNum(pageNum - 1);\n    }\n  };\n\n  const goToNextPage = () => {\n    if (pageNum < totalPages) {\n      setPageNum(pageNum + 1);\n    }\n  };\n\n  const goToFirstPage = () => {\n    setPageNum(1);\n  };\n\n  const goToLastPage = () => {\n    setPageNum(totalPages);\n  };\n\n  const paginationButtons = [];\n  const maxPageButtons = Math.min(totalPages, 5);\n\n  let startPage = Math.max(1, pageNum - 2);\n  if (startPage + maxPageButtons > totalPages) {\n    startPage = totalPages - maxPageButtons + 1;\n  }\n\n  for (let i = startPage; i < startPage + maxPageButtons; i++) {\n    paginationButtons.push(\n      <a\n        href=\"#\"\n        className={pageNum === i ? 'active' : ''}\n        onClick={() => goToPage(i)}\n      >\n        {i}\n      </a>\n    );\n  }\n\n  return (\n    <MainBackgorund>\n      <div className=\"mainboard\">\n        <br />\n        {loading ? (\n          <div\n            style={{\n              fontSize: '120px',\n              color: 'white',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              position: 'relative',\n              top: '30%',\n            }}\n          >\n            <FaSpinner className=\"loadingIcon\" />\n          </div>\n        ) : (\n          <>\n            <h2>자유게시판</h2>\n            <ul>\n              {posts.map((post) => (\n                <li key={post.brdNo}>\n                  <div className=\"link-wrapper\">\n                    <a\n                      onClick={() => {\n                        navigate('/postview', {\n                          state: { brdNo: post.brdNo },\n                        });\n                      }}\n                    >\n                      {post.brdTitle}\n                    </a>\n                    <div className=\"meta\">\n                      <span>{post.mem_name}</span>\n                      <span>|</span>\n                      <span>{post.brdViewCount}</span>\n                      <span>|</span>\n                      <span>{post.brdRegDate.split('T')[0]}</span>\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n            <button\n              id=\"freewrite\"\n              onClick={() => {\n                navigate('/write');\n              }}\n            >\n              글쓰기\n            </button>\n          </>\n        )}\n      </div>\n      <div className=\"pagination\">\n        <a href=\"#\" onClick={goToFirstPage}>\n          &lt;&lt;\n        </a>\n        <a href=\"#\" onClick={goToPrevPage}>\n          &lt;\n        </a>\n        {paginationButtons}\n        <a href=\"#\" onClick={goToNextPage}>\n          &gt;\n        </a>\n        <a href=\"#\" onClick={goToLastPage}>\n          &gt;&gt;\n        </a>\n      </div>\n    </MainBackgorund>\n  );\n}\n\nexport default Freeboard;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/newpw.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/login/login.js",["154","155"],[],"import React, { useState, useEffect } from 'react';\nimport styles from './login.module.css'; //CSS Module 이라는 기술을 사용하면, CSS 클래스가 중첩되는 것을 완벽히 방지할 수 있음\nimport IDBackground from '../backgrounds/ID_background';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../supabase';\n\nfunction Login() {\n  useEffect(() => {\n    document.title = 'Toonder 로그인';\n  }, []);\n  const [email, setEmail] = useState(''); //이메일 값\n  const [password, setPw] = useState(''); //비밀번호 값\n  const [emailValid, setEmailValid] = useState(false); //이메일 유효성\n  const [pwValid, setPwValid] = useState(false); //비밀번호 유효성\n  const [notAllow, setNotAllow] = useState(true); //로그인 (submit)버튼 활성화 여부\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // 이미 로그인된 상태인지 확인\n    const checkLoggedIn = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session !== null) {\n        // 이미 로그인된 상태라면 로그아웃하고 메인 페이지로 이동\n        alert('이미 로그인되어 있습니다.');\n        navigate('/main_page'); // 메인 페이지로 이동\n      }\n    };\n\n    checkLoggedIn();\n  }, []);\n\n  const onClickConfirm = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password,\n      });\n\n      if (error) {\n        alert('로그인에 실패했습니다.');\n        console.log(error);\n      } else if (data) {\n        alert('로그인 되었습니다.');\n\n        sessionStorage.setItem('loggedUserEmail', email); // 로그인 하면 sessionStorage에 email이 저장됨\n        navigate('/main_page'); // 로그인 성공 시 대시보드 페이지로 이동\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    //이메일 유효성과 비밀번호 유효성이 바꼈을때 둘다 유효한 경우만 login버튼 활성화 해주는 기능\n    if (emailValid && pwValid) setNotAllow(false);\n    else setNotAllow(true);\n    return;\n  }, [emailValid, pwValid]);\n\n  const handleEmail = (e) => {\n    //이메일 값을 value에 state\n    setEmail(e.target.value);\n    const regex = //이메일 유효성검사 하기위한 객체\n      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n    if (regex.test(e.target.value)) {\n      setEmailValid(true);\n    } else {\n      setEmailValid(false);\n    }\n  };\n\n  const handlePW = (e) => {\n    //위와 마찬가지 비밀번호인 경우\n    setPw(e.target.value);\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setPwValid(true);\n    } else {\n      setPwValid(false);\n    }\n  };\n\n  return (\n    //클래스를 설정할땐 styles객체안에 있는 값을 참조하는 방식\n    <div>\n      <IDBackground text=\"Login\">\n        {loading ? (\n          <div className={styles.Loading}>로그인 중 입니다...</div>\n        ) : (\n          <form>\n            <div className={styles.Login}>\n              <div>\n                {!emailValid &&\n                  email.length > 0 && ( //이메일이 유효하지 않고 이메일을 입력하기 시작하면 에러 메세지가 뜸\n                    <div>올바른 이메일을 입력해주세요</div>\n                  )}\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={email}\n                  onChange={handleEmail}\n                  placeholder=\"Enter your e-mail\"\n                />\n              </div>\n              <div>\n                {!pwValid && password.length > 0 && (\n                  <div>영문, 숫자 포함 8~10자 입력해주세요</div> //비밀번호가 유효하지 않고 비밀번호를 입력하기 시작하면 에러 메세지가 뜸\n                )}\n              </div>\n              <div>\n                <input\n                  type=\"password\"\n                  value={password}\n                  onChange={handlePW}\n                  placeholder=\"Enter your password\"\n                />\n              </div>\n              <button\n                onClick={onClickConfirm}\n                disabled={notAllow}\n                type=\"submit\"\n              >\n                <strong>Login</strong>\n              </button>\n            </div>\n          </form>\n        )}\n      </IDBackground>\n      <div className={styles.FindnSign}>\n        <button\n          onClick={() => {\n            navigate('/findid');\n          }}\n          id=\"find_id_button\"\n        >\n          아이디 찾기\n        </button>\n        &nbsp;&nbsp;\n        <button\n          onClick={() => {\n            navigate('/findpw');\n          }}\n          id=\"find_pw_button\"\n        >\n          비밀번호 찾기\n        </button>\n        &nbsp;&nbsp;\n        <button\n          onClick={() => {\n            navigate('/join');\n          }}\n          id=\"join\"\n        >\n          회원가입\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findpw.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/main_page.js",["156","157","158","159"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mainPage.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport MainBackSmall from '../backgrounds/mainBackSmall';\nimport supabase from '../supabase';\nimport { useLocation } from 'react-router';\nimport axios from 'axios';\nimport logo from '../../images/logo2.png';\nimport { FaSpinner } from 'react-icons/fa'; // 로딩 아이콘 추가\n\nfunction Mainpage(props) {\n  const navigate = useNavigate();\n  const [resdata, setResData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session === null) {\n        alert('로그인을 먼저 해주세요.');\n        navigate('/');\n      } else {\n        const email = session.user.email;\n        const requestData = {\n          email: email,\n        };\n\n        axios\n          .post('toonder/recommand', requestData)\n          .then((res) => {\n            console.log(res.data);\n            setResData(res.data);\n            setIsLoading(false); // 데이터 가져오기 완료 후 로딩 상태 변경\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleRecommendation = () => {\n    setIsLoading(true); // 새로운 추천 웹툰 이미지를 가져오기 전에 로딩 상태를 true로 설정\n\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n      const email = session.user.email;\n      const requestData = {\n        email: email,\n      };\n\n      axios\n        .post('toonder/recommand', requestData)\n        .then((res) => {\n          console.log(res.data);\n          setResData(res.data);\n          setIsLoading(false); // 데이터 가져오기 완료 후 로딩 상태 변경\n        })\n        .catch((error) => console.log(error));\n    };\n\n    fetchData();\n  };\n\n  return (\n    <MainBackgorund>\n      <div style={{ position: 'relative' }}>\n        <h2\n          style={{\n            position: 'absolute',\n            color: 'white',\n            display: 'flex',\n            zIndex: 1,\n            top: '90px',\n            left: '300px',\n          }}\n        >\n          추천 웹툰 목록\n        </h2>\n      </div>{' '}\n      <MainBackSmall>\n        <div className=\"mainPage\">\n          <div style={{ position: 'absolute' }}>\n            <button\n              onClick={handleRecommendation}\n              style={{\n                position: 'absolute',\n                color: 'rgb(255, 147, 147)',\n                display: 'flex',\n                backgroundColor: 'white',\n                width: '150px',\n                height: '25px',\n                justifyContent: 'center', // 가로 가운데 정렬\n                alignItems: 'center',\n                fontSize: '22px',\n                top: '-235px',\n                left: '765px',\n                borderRadius: '10px',\n              }}\n            >\n              추천 새로 받기\n            </button>\n          </div>\n          {isLoading ? ( // 로딩 중일 때의 화면\n            <div\n              style={{\n                fontSize: '100px',\n                color: 'white',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '100vh',\n              }}\n            >\n              <FaSpinner className=\"loadingIcon\" />\n            </div>\n          ) : (\n            <main>\n              <div className=\"recommendationButtonWrapper\"></div>\n              <table>\n                <tbody>\n                  <tr>\n                    {resdata.map((item, index) => (\n                      <td key={index}>\n                        <button\n                          className=\"refresh\"\n                          onClick={() => {\n                            navigate('/mainwebtooninfo', {\n                              state: { mastrId: item.mastrId },\n                            });\n                          }}\n                        >\n                          <div className=\"imageContainer\">\n                            <img\n                              className=\"webtoonImage\"\n                              src={item.imageDownloadUrl}\n                              alt=\"image error\"\n                              onError={(e) => {\n                                e.target.onerror = null;\n                                e.target.src = logo;\n                              }}\n                            />\n                          </div>\n                          <br />\n\n                          <p\n                            className=\"webtoonTitle\"\n                            style={{ fontSize: '18px', color: 'white' }}\n                          >\n                            {item.title}\n                          </p>\n                        </button>\n                      </td>\n                    ))}\n                  </tr>\n                </tbody>\n              </table>\n            </main>\n          )}\n          <div className=\"botPage\">\n            <section>\n              <ul>\n                <li>\n                  사람의 감정과 이성의 중도를 너무 간결하게 이해시켜주는 작품인\n                  거 같습니다!” - Hanna Lee\n                </li>\n                <li>네이버 웹툰 중에서 제일 재밌음! - Stephan Lee</li>\n                <li>\n                  설레는 포인트도 많고, 정주행 10번은 해야지~ - Howard Wolowitz\n                </li>\n              </ul>\n            </section>\n          </div>\n        </div>\n        {props.children}\n      </MainBackSmall>\n    </MainBackgorund>\n  );\n}\n\nexport default Mainpage;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/infoChange.js",["160"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport Background from '../backgrounds/backGround';\nimport supabase from '../supabase';\nimport styles from './infoChange.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport { FaSpinner } from 'react-icons/fa'; // 로딩 아이콘 추가\n\nfunction InfoC() {\n  useEffect(() => {\n    document.title = 'Toonder 정보변경';\n  }, []); //페이지 타이틀\n\n  const [firstName, setFirstName] = useState(''); //이름 값\n  const [lastName, setLastName] = useState(''); //성씨 값\n  const [pw, setPw] = useState(''); //비밀번호 값\n  const [pwc, setPwc] = useState(''); //비밀번호 확인 값\n  const [isPwCheck, setIsPwCheck] = useState(false); //비밀번호 확인 여부\n  const [isPwValid, setIsPwValid] = useState(false); //비밀번호 유효성 여부\n  const navigate = useNavigate();\n  const [notAllow, setNotAllow] = useState(true); //회원가입 버튼 활성화 여부\n  const [selectedHashtags, setSelectedHashtags] = useState('');\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const storedHashtags = localStorage.getItem('loggedUserHashTag');\n    if (storedHashtags) {\n      const tags = storedHashtags.split(' ').map((tag) => tag.replace('#', ''));\n      setSelectedHashtags(tags);\n    }\n  }, []); //사용자 해시태그 정보 가져옴\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    const hashtag = '#' + selectedHashtags.join(' #');\n    const email = sessionStorage.getItem('loggedUserEmail');\n\n    try {\n      await supabase.auth.updateUser({ password: pw });\n\n      axios\n        .post('toonder/update', {\n          mem_email: email,\n          mem_name: lastName + firstName,\n          mem_hashtag: hashtag,\n        })\n        .then(() => {\n          localStorage.removeItem('loggedUserName');\n          localStorage.removeItem('loggedUserHashTag');\n          setLoading(false);\n          alert('회원정보가 변경되었습니다.');\n          navigate(-1);\n        })\n        .catch(() => {\n          console.log(\n            'Error for sending user data to Spring - creating member'\n          );\n          alert('회원정보 변경 중에 오류가 발생했습니다.');\n        });\n    } catch (error) {\n      console.error(error);\n      alert('회원정보 변경 중에 오류가 발생했습니다.');\n    }\n  };\n\n  useEffect(() => {\n    if (\n      isPwCheck &&\n      isPwValid &&\n      firstName.length > 0 &&\n      lastName.length > 0 &&\n      selectedHashtags.length > 0\n    )\n      setNotAllow(false);\n    else setNotAllow(true);\n\n    return;\n  }, [isPwValid, isPwCheck, firstName, lastName, selectedHashtags]);\n\n  const handleFirstName = (e) => {\n    setFirstName(e.target.value);\n  };\n\n  const handleLastName = (e) => {\n    setLastName(e.target.value);\n  };\n\n  const handlePW = (e) => {\n    setPw(e.target.value);\n\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setIsPwValid(true);\n    } else {\n      setIsPwValid(false);\n    }\n\n    if (e.target.value === pwc) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleCheckPw = (e) => {\n    setPwc(e.target.value);\n    if (pw === e.target.value) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleCheckboxChange = (event) => {\n    const { value, checked } = event.target;\n    if (checked) {\n      setSelectedHashtags((prevSelectedHashtags) => [\n        ...prevSelectedHashtags,\n        value,\n      ]);\n    } else {\n      setSelectedHashtags((prevSelectedHashtags) =>\n        prevSelectedHashtags.filter((hashtag) => hashtag !== value)\n      );\n    }\n  };\n\n  const hashtagOptions = [\n    '공포',\n    '드라마',\n    '코믹',\n    '일상',\n    '판타지',\n    '액션',\n    '역사',\n    '학원',\n    'SF',\n    '학습만화',\n    '캠페인',\n    '스포츠',\n    '동성애',\n    '추리',\n    '모험',\n    '무협',\n    '시사',\n    '교양',\n    '요리',\n    '성인',\n    '순정',\n    'BL',\n    '소년',\n    '미스터리',\n    'GL',\n    '로맨스판타지',\n    '카툰',\n    '기관발행물',\n    '만화이론',\n    '로맨스',\n    '그래픽노블',\n    '개그',\n  ];\n\n  return (\n    <Background text=\"Info Change\" backgroundSize=\"600px 500px\">\n      {loading ? ( // 로딩 중일 때의 화면\n        <div\n          style={{\n            fontSize: '100px',\n            color: 'white',\n            display: 'flex',\n            alignItems: 'center',\n            position: 'absolute',\n            top: '390px',\n          }}\n        >\n          <FaSpinner className={styles.loadingIcon} />\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <div className={styles.name}>\n            <input\n              type=\"text\"\n              onChange={handleFirstName}\n              id=\"firstName\"\n              placeholder=\"이름\"\n              autoComplete=\"off\"\n            />\n            <input\n              type=\"text\"\n              onChange={handleLastName}\n              id=\"lastName\"\n              placeholder=\"성\"\n              autoComplete=\"off\"\n            />\n          </div>\n\n          <div className={styles.password}>\n            {!isPwValid && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                }}\n              >\n                영문, 숫자 포함 8~10자 이상 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handlePW}\n              value={pw}\n              placeholder=\"비밀번호\"\n              autoComplete=\"off\"\n            />\n            {!isPwCheck && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '270px',\n                  fontWeight: 'normal',\n                }}\n              >\n                비밀번호를 한번 더 정확히 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handleCheckPw}\n              value={pwc}\n              placeholder=\"비밀번호 확인\"\n              autoComplete=\"off\"\n            />\n          </div>\n\n          {!selectedHashtags.length > 0 && (\n            <div\n              style={{\n                position: 'absolute',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '70%',\n                  top: '-50px',\n                }}\n              >\n                좋아하는 만화 장르를 1개 이상 선택\n              </div>\n            </div>\n          )}\n\n          <CheckboxContainer>\n            {hashtagOptions.map((hashtag) => (\n              <CheckboxLabel key={hashtag}>\n                <CheckboxInput\n                  type=\"checkbox\"\n                  value={hashtag}\n                  onChange={handleCheckboxChange}\n                  checked={selectedHashtags.includes(hashtag)}\n                />\n                {hashtag}\n              </CheckboxLabel>\n            ))}\n          </CheckboxContainer>\n          <div>\n            <button className={styles.submit} disabled={notAllow} type=\"submit\">\n              <strong>Info Change</strong>\n            </button>\n          </div>\n        </form>\n      )}\n    </Background>\n  );\n}\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 200px;\n  overflow-y: auto;\n  border: 1px solid #ccc;\n  padding: 10px;\n  width: 470px;\n  transform: translateX(5%);\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: 391px;\n  border-radius: 10px;\n  background-color: white;\n  color: grey;\n\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  width: 50%;\n  margin-bottom: 5px;\n`;\n\nconst CheckboxInput = styled.input`\n  margin-right: 15px;\n  margin-left: 65px;\n`;\n\nexport default InfoC;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/join/join.js",["161"],[],"import React, { useState, useEffect } from 'react';\nimport Background from '../backgrounds/backGround';\nimport supabase from '../supabase';\nimport styles from './join.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 160px;\n  overflow-y: auto;\n  border: 1px solid #ccc;\n  padding: 10px;\n  width: 470px;\n  transform: translateX(5%);\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: 455px;\n  border-radius: 10px;\n  background-color: white;\n  color: grey;\n\n  /* 스크롤 스타일 적용 */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  width: 50%;\n  margin-bottom: 5px;\n`;\n\nconst CheckboxInput = styled.input`\n  margin-right: 15px;\n  margin-left: 65px;\n`;\n\nfunction Join() {\n  useEffect(() => {\n    document.title = 'Toonder 회원가입';\n  }, []);\n  const [pw, setPw] = useState(''); //비밀번호 값\n  const [pwc, setPwc] = useState(''); //비밀번호 확인 값\n  const [isPwCheck, setIsPwCheck] = useState(false); //비밀번호 확인 여부\n  const [isPwValid, setIsPwValid] = useState(false); //비밀번호 유효성 여부\n  const [firstName, setFirstName] = useState(''); //이름 값\n  const [lastName, setLastName] = useState(''); //성씨 값\n  const [email, setEmail] = useState(''); //이메일 값\n  const [notAllow, setNotAllow] = useState(true); //회원가입 버튼 활성화 여부\n  const [isValidEmail, setEmailValid] = useState(false); //이메일 유효성 여부\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [selectedHashtags, setSelectedHashtags] = useState([]);\n\n  const handleCheckboxChange = (event) => {\n    const { value, checked } = event.target;\n    if (checked) {\n      setSelectedHashtags((prevSelectedHashtags) => [\n        ...prevSelectedHashtags,\n        value,\n      ]);\n    } else {\n      setSelectedHashtags((prevSelectedHashtags) =>\n        prevSelectedHashtags.filter((hashtag) => hashtag !== value)\n      );\n    }\n  };\n\n  const hashtagOptions = [\n    '공포',\n    '드라마',\n    '코믹',\n    '일상',\n    '판타지',\n    '액션',\n    '역사',\n    '학원',\n    'SF',\n    '학습만화',\n    '캠페인',\n    '스포츠',\n    '동성애',\n    '추리',\n    '모험',\n    '무협',\n    '시사',\n    '교양',\n    '요리',\n    '성인',\n    '순정',\n    'BL',\n    '소년',\n    '미스터리',\n    'GL',\n    '로맨스판타지',\n    '카툰',\n    '기관발행물',\n    '만화이론',\n    '로맨스',\n    '그래픽노블',\n    '개그',\n  ];\n\n  useEffect(() => {\n    if (\n      isValidEmail &&\n      isPwCheck &&\n      isPwValid &&\n      firstName.length > 0 &&\n      lastName.length > 0 &&\n      selectedHashtags.length > 0\n    )\n      setNotAllow(false);\n    else setNotAllow(true);\n    return;\n  }, [\n    isValidEmail,\n    isPwValid,\n    isPwCheck,\n    firstName,\n    lastName,\n    selectedHashtags,\n  ]);\n\n  const handleFirstName = (e) => {\n    setFirstName(e.target.value);\n  };\n\n  const handleLastName = (e) => {\n    setLastName(e.target.value);\n  };\n\n  const handlePW = (e) => {\n    setPw(e.target.value);\n\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setIsPwValid(true);\n    } else {\n      setIsPwValid(false);\n    }\n\n    if (e.target.value === pwc) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleEmail = (e) => {\n    setEmail(e.target.value);\n    const regex =\n      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n    if (regex.test(e.target.value)) {\n      setEmailValid(true);\n    } else {\n      setEmailValid(false);\n    }\n  };\n\n  const handleCheckPw = (e) => {\n    setPwc(e.target.value);\n\n    if (pw === e.target.value) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    //////////////체크박스로 입력받은 해시태그는 공백으로 단어가 분리된 문자열로 저장을 해서 데이터로 보냄\n    setLoading(true);\n    const hashtag = '#' + selectedHashtags.join(' #');\n    axios\n      .post('toonder/join', {\n        mem_email: email,\n        mem_name: lastName + firstName,\n        mem_hashtag: hashtag,\n      })\n      .catch(function () {\n        console.log('Error for sending user data to Spring - creating member');\n      });\n\n    e.preventDefault();\n\n    const { data, error } = await supabase.auth.signUp({\n      email: email,\n      password: pw,\n    });\n\n    if (error) {\n      alert(error);\n      setLoading(false);\n    } else alert('인증 메일을 발송했습니다. 이메일 확인 후 로그인해주세요.');\n    navigate('/');\n  };\n\n  return (\n    <Background text=\"Join\" backgroundSize=\"600px 500px\">\n      {loading ? (\n        <div className={styles.Loading}>잠시만 기다려주세요...</div>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <div className={styles.name}>\n            <input\n              type=\"text\"\n              onChange={handleFirstName}\n              id=\"firstName\"\n              placeholder=\"이름\"\n            />\n            <input\n              type=\"text\"\n              onChange={handleLastName}\n              id=\"lastName\"\n              placeholder=\"성\"\n            />\n          </div>\n          <div className={styles.email}>\n            {!isValidEmail && email.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                }}\n              >\n                올바른 이메일을 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={handleEmail}\n              placeholder=\"이메일 입력\"\n            />\n          </div>\n          <div className={styles.password}>\n            {!isPwValid && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                }}\n              >\n                영문, 숫자 포함 8~10자 이상 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handlePW}\n              value={pw}\n              placeholder=\"비밀번호\"\n            />\n            {!isPwCheck && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '270px',\n                  fontWeight: 'normal',\n                }}\n              >\n                비밀번호를 한번 더 정확히 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handleCheckPw}\n              value={pwc}\n              placeholder=\"비밀번호 확인\"\n            />\n          </div>\n          {!selectedHashtags.length > 0 && (\n            <div\n              style={{\n                position: 'absolute',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '70%',\n                  top: '-10px',\n                }}\n              >\n                좋아하는 만화 장르를 1개 이상 선택\n              </div>\n            </div>\n          )}\n\n          <CheckboxContainer>\n            {hashtagOptions.map((hashtag) => (\n              <CheckboxLabel key={hashtag}>\n                <CheckboxInput\n                  type=\"checkbox\"\n                  value={hashtag}\n                  onChange={handleCheckboxChange}\n                />\n                {hashtag}\n              </CheckboxLabel>\n            ))}\n          </CheckboxContainer>\n          <div>\n            <button className={styles.submit} disabled={notAllow} type=\"submit\">\n              <strong>Join</strong>\n            </button>\n          </div>\n        </form>\n      )}\n    </Background>\n  );\n}\nexport default Join;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mypage.js",["162","163","164","165"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mainPage.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\nimport supabase from '../supabase';\nimport ex1 from '../../images/ex1.png';\n\nfunction Mypage() {\n  const navigate = useNavigate();\n  const [loggedUserName, setLoggedUserName] = useState(\n    localStorage.getItem('loggedUserName')\n  );\n  const [loggedUserHashTag, setLoggedUserHashTag] = useState(\n    localStorage.getItem('loggedUserHashTag')\n  );\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const [loggedUserImage, setLoggedUserImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await supabase.auth.getSession();\n      const email = data.session.user.email;\n      const requestData = {\n        email: email,\n      };\n\n      axios\n        .post('toonder/mypage', requestData)\n        .then((hashData) => {\n          console.log(hashData.data.mem_hashtag);\n          setLoggedUserHashTag(hashData.data.mem_hashtag);\n          localStorage.setItem('loggedUserHashTag', hashData.data.mem_hashtag);\n        })\n        .catch((error) => console.log(error));\n\n      if (!localStorage.getItem('loggedUserName')) {\n        axios\n          .post('toonder/name', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_name);\n            setLoggedUserName(loggedUserData.data.mem_name);\n            localStorage.setItem(\n              'loggedUserName',\n              loggedUserData.data.mem_name\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <MainBackgorund>\n      <div className=\"mainUserInfo\">\n        <div className=\"mainInfo\">\n          <div onClick={openModal}>\n            <img id=\"infoimg\" src={loggedUserImage} alt=\"image error\" />\n          </div>\n          <h2>{loggedUserName}</h2>\n          <button\n            id=\"changeInfo\"\n            onClick={() => {\n              navigate('/infochange');\n            }}\n          >\n            <h3>정보수정</h3>\n          </button>\n        </div>\n\n        <h1>{loggedUserHashTag}</h1>\n      </div>\n\n      <div className=\"subUserInfo\">\n        <div className=\"myReview\">\n          <h2>나의 리뷰</h2>\n          <section>\n            <h4>유미의 세포들</h4>\n            <ul>\n              <li>\n                사람의 감정과 이성의 중도를 너무 간결하게 이해시켜주는 작품인 거\n                같습니다!\n              </li>\n            </ul>\n          </section>\n        </div>\n        <div className=\"myPost\">\n          <h2>나의 자유게시판 글</h2>\n          <section>\n            <ul>\n              <li>원주민 공포만화 관련 정보 올려주세요!</li>\n            </ul>\n          </section>\n        </div>\n      </div>\n      <div>\n        {modalOpen && (\n          <ModalBasic\n            setModalOpen={setModalOpen}\n            setLoggedUserImage={setLoggedUserImage}\n            openModal={openModal}\n          />\n        )}\n      </div>\n    </MainBackgorund>\n  );\n}\n\nfunction ModalBasic({ setModalOpen, setLoggedUserImage, openModal }) {\n  const [selectedImage, setSelectedImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const [newImage, setNewImage] = useState(null);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setSelectedImage(reader.result);\n      setNewImage(file);\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSave = async () => {\n    if (newImage) {\n      console.log('새 이미지 저장:', newImage);\n\n      const { data } = await supabase.auth.getSession();\n      axios\n        .post('toonder/photo/update', {\n          email: data.session.user.email,\n          image: selectedImage,\n        })\n        .then((res) => console.log(res))\n        .catch((error) => console.log(error));\n\n      localStorage.setItem('loggedUserPhoto', selectedImage);\n      setLoggedUserImage(selectedImage);\n    }\n\n    closeModal();\n  };\n\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const handler = (event) => {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        setModalOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handler);\n\n    return () => {\n      document.removeEventListener('mousedown', handler);\n    };\n  }, []);\n\n  return (\n    <div className=\"profilechangeback\">\n      <div className=\"profilechange\" ref={modalRef}>\n        <img id=\"changeinfoimg\" src={selectedImage} alt=\"image error\" />\n        <div id=\"changeFile\">\n          <label htmlFor=\"chooseFile\">\n            <h3>프로필 사진 변경</h3>\n          </label>\n        </div>\n        <div style={{ position: 'relative' }}>\n          <input\n            type=\"file\"\n            id=\"chooseFile\"\n            name=\"chooseFile\"\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            style={{\n              position: 'absolute',\n              right: '-200px',\n              top: '0px',\n              marginTop: '10px',\n            }}\n          />\n        </div>\n        <div id=\"changeButtonSet\" style={{ marginTop: '25px' }}>\n          <button id=\"submitButton\" type=\"submit\" onClick={handleSave}>\n            <h3>저장</h3>\n          </button>\n          <br />\n          <button id=\"cancel\" onClick={closeModal}>\n            <h3>취소</h3>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Mypage;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackSmall.js",["166","167","168","169"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './backGround.module.css';\nimport ex1 from '../../images/ex1.png';\nimport axios from 'axios';\nimport supabase from '../supabase';\n\nfunction MainBackSmall(props) {\n  const navigate = useNavigate();\n  const [loggedUserName, setLoggedUserName] = useState(\n    localStorage.getItem('loggedUserName')\n  );\n  const [loggedUserImage, setLoggedUserImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await supabase.auth.getSession();\n      const email = data.session.user.email;\n      const requestData = {\n        email: email,\n      };\n\n      if (!localStorage.getItem('loggedUserName')) {\n        axios\n          .post('toonder/name', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_name);\n            setLoggedUserName(loggedUserData.data.mem_name);\n            localStorage.setItem(\n              'loggedUserName',\n              loggedUserData.data.mem_name\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n\n      if (!localStorage.getItem('loggedUserPhoto')) {\n        axios\n          .post('toonder/photo', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_photo);\n            setLoggedUserImage(loggedUserData.data.mem_photo);\n            localStorage.setItem(\n              'loggedUserPhoto',\n              loggedUserData.data.mem_photo\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"mainBackSmall\">\n      <div className=\"mainInfo\">\n        <div onClick={openModal}>\n          <img id=\"infoimg\" src={loggedUserImage} alt=\"image error\" />\n        </div>\n        <h2 style={{ color: 'white' }}>{loggedUserName}</h2>\n        <button\n          id=\"changeInfo\"\n          onClick={() => {\n            navigate('/infochange');\n          }}\n        >\n          <h3>정보수정</h3>\n        </button>\n      </div>\n      <div className=\"mainButtonSet\">\n        <button\n          id=\"webtoonList\"\n          onClick={() => {\n            navigate('/mainWebtoonList');\n          }}\n        >\n          웹툰 목록\n        </button>\n        <button\n          id=\"mypage\"\n          onClick={() => {\n            navigate('/mypage');\n          }}\n        >\n          마이페이지\n        </button>\n        <button\n          id=\"freeBoard\"\n          onClick={() => {\n            navigate('/freeboard');\n          }}\n        >\n          자유게시판\n        </button>\n        <button\n          id=\"logOut\"\n          onClick={async () => {\n            localStorage.removeItem('loggedUserPhoto');\n            localStorage.removeItem('loggedUserName');\n            localStorage.removeItem('loggedUserHashTag');\n            sessionStorage.removeItem('loggedUserEmail'); // 세션 스토리지에서 loggedUserEmail 제거\n            alert('로그아웃 되었습니다.');\n            await supabase.auth.signOut();\n            navigate('/');\n          }}\n        >\n          로그아웃\n        </button>\n      </div>\n      {modalOpen && (\n        <ModalBasic\n          setModalOpen={setModalOpen}\n          setLoggedUserImage={setLoggedUserImage}\n          openModal={openModal}\n        />\n      )}\n      {props.children}\n    </div>\n  );\n}\n\nfunction ModalBasic({ setModalOpen, setLoggedUserImage, openModal }) {\n  const [selectedImage, setSelectedImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const [newImage, setNewImage] = useState(null);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setSelectedImage(reader.result);\n      setNewImage(file);\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSave = async () => {\n    if (newImage) {\n      console.log('새 이미지 저장:', newImage);\n\n      const { data } = await supabase.auth.getSession();\n      axios\n        .post('toonder/photo/update', {\n          email: data.session.user.email,\n          image: selectedImage,\n        })\n        .then((res) => console.log(res))\n        .catch((error) => console.log(error));\n\n      localStorage.setItem('loggedUserPhoto', selectedImage);\n      setLoggedUserImage(selectedImage);\n    }\n\n    closeModal();\n  };\n\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const handler = (event) => {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        setModalOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handler);\n\n    return () => {\n      document.removeEventListener('mousedown', handler);\n    };\n  }, []);\n\n  return (\n    <div className=\"profilechangeback\">\n      <div className=\"profilechange\" ref={modalRef}>\n        <img id=\"changeinfoimg\" src={selectedImage} alt=\"image error\" />\n        <div id=\"changeFile\">\n          <label htmlFor=\"chooseFile\">\n            <h3>프로필 사진 변경</h3>\n          </label>\n        </div>\n        <div style={{ position: 'relative' }}>\n          <input\n            type=\"file\"\n            id=\"chooseFile\"\n            name=\"chooseFile\"\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            style={{\n              position: 'absolute',\n              right: '-200px',\n              top: '0px',\n              marginTop: '10px',\n            }}\n          />\n        </div>\n        <div id=\"changeButtonSet\" style={{ marginTop: '25px' }}>\n          <button id=\"submitButton\" type=\"submit\" onClick={handleSave}>\n            <h3>저장</h3>\n          </button>\n          <br />\n          <button id=\"cancel\" onClick={closeModal}>\n            <h3>취소</h3>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MainBackSmall;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/ID_background.js",["170","171","172"],[],"import React from 'react';\nimport styles from '../../style.css';\nimport logo from '../../images/logoimage.png';\nimport { Link } from 'react-router-dom';\n\nfunction IDBackground(props) {\n  return (\n    <div className=\"id_background\">\n      <div className=\"find_logo\">\n        <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n        <strong>{props.text}</strong>\n      </div>\n      {props.children} {/* props.children 렌더링 */}\n    </div>\n  );\n}\n\nexport default IDBackground;\n\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/supabase.js",["173"],[],"import { createClient } from '@supabase/supabase-js';\nimport { Auth } from '@supabase/auth-ui-react';\n\nconst supabaseUrl = 'https://fsxogdtxxerrzpdgyyac.supabase.co/';\nconst supabaseKey =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZzeG9nZHR4eGVycnpwZGd5eWFjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODI4NzA4NTQsImV4cCI6MTk5ODQ0Njg1NH0.4ayoRXi9Z0745i2dyqIjvm23CSBRK--iAFspUAy6pOw';\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport default supabase;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackground.js",["174","175","176","177"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport logo from '../../images/logoimage.png';\nimport './backGround.module.css';\nimport axios from 'axios';\n\nfunction MainBackgorund(props) {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"mainPageBack\">\n      <div className=\"logoSearch\">\n        {' '}\n        {/* 좌우구분용 네브 */}\n        <div className=\"mainLogo\">\n          <button\n            id=\"main_page\"\n            onClick={() => {\n              navigate('/main_page');\n            }}\n          >\n            <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n            <h1>Toonder</h1>\n          </button>\n        </div>\n        <div className=\"mainSearch\">\n          <input\n            id=\"mainSearchInput\"\n            type=\"text\"\n            placeholder=\"    찾고싶은 웹툰 검색!\"\n          />\n          <button id=\"mainSearchButton\">검색</button>\n        </div>\n      </div>\n      {props.children} {/* props.children 렌더링 */}\n    </div>\n  );\n}\nexport default MainBackgorund;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/backGround.js",["178","179"],[],"import React from 'react';\nimport styles from './backGround.module.css';\nimport logo from '../../images/logoimage.png';\nimport { Link } from 'react-router-dom';\n//\nfunction Background(props) {\n  return (\n    <div\n      className={styles.background}\n      style={{ backgroundSize: props.backgroundSize }} //백그라운드 사이즈를 props 객체로 전달해서 컴포넌트마다 사이즈를 조정해서 사용가능\n    >\n      <div\n        className={styles.logo}\n        style={\n          {\n            top: props.top,\n            left: props.left,\n          } /*로고 위치도 props로 전달받아 컴포넌트마다 위치를 조장해서 사용가능 */\n        }\n      >\n        <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n        <strong>{props.text}</strong>\n      </div>\n      {props.children} {/* props.children 렌더링 */}\n    </div>\n  );\n}\n\nexport default Background;","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/write.js",["180"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/postview.js",["181","182","183"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/modal.js",[],[],{"ruleId":"184","severity":1,"message":"185","line":3,"column":17,"nodeType":"186","messageId":"187","endLine":3,"endColumn":26},{"ruleId":"184","severity":1,"message":"188","line":3,"column":28,"nodeType":"186","messageId":"187","endLine":3,"endColumn":36},{"ruleId":"184","severity":1,"message":"189","line":16,"column":8,"nodeType":"186","messageId":"187","endLine":16,"endColumn":13},{"ruleId":"184","severity":1,"message":"190","line":4,"column":8,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"184","severity":1,"message":"191","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":21},{"ruleId":"184","severity":1,"message":"192","line":72,"column":31,"nodeType":"186","messageId":"187","endLine":72,"endColumn":53},{"ruleId":"193","severity":1,"message":"194","line":74,"column":13,"nodeType":"195","endLine":100,"endColumn":4},{"ruleId":"184","severity":1,"message":"196","line":75,"column":19,"nodeType":"186","messageId":"187","endLine":75,"endColumn":24},{"ruleId":"193","severity":1,"message":"197","line":100,"column":6,"nodeType":"198","endLine":100,"endColumn":8,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":197,"column":15,"nodeType":"202","endLine":197,"endColumn":59},{"ruleId":"203","severity":1,"message":"204","line":211,"column":21,"nodeType":"202","messageId":"205","endLine":214,"endColumn":22,"fix":"206"},{"ruleId":"200","severity":1,"message":"201","line":29,"column":16,"nodeType":"202","endLine":29,"endColumn":51},{"ruleId":"200","severity":1,"message":"201","line":30,"column":27,"nodeType":"202","endLine":30,"endColumn":62},{"ruleId":"200","severity":1,"message":"201","line":31,"column":27,"nodeType":"202","endLine":31,"endColumn":62},{"ruleId":"200","severity":1,"message":"201","line":32,"column":27,"nodeType":"202","endLine":32,"endColumn":62},{"ruleId":"200","severity":1,"message":"201","line":35,"column":19,"nodeType":"202","endLine":35,"endColumn":54},{"ruleId":"200","severity":1,"message":"201","line":36,"column":19,"nodeType":"202","endLine":36,"endColumn":54},{"ruleId":"200","severity":1,"message":"201","line":37,"column":19,"nodeType":"202","endLine":37,"endColumn":54},{"ruleId":"200","severity":1,"message":"201","line":38,"column":19,"nodeType":"202","endLine":38,"endColumn":54},{"ruleId":"184","severity":1,"message":"207","line":2,"column":23,"nodeType":"186","messageId":"187","endLine":2,"endColumn":27},{"ruleId":"208","severity":1,"message":"209","line":76,"column":7,"nodeType":"202","endLine":80,"endColumn":8},{"ruleId":"208","severity":1,"message":"210","line":111,"column":21,"nodeType":"202","endLine":117,"endColumn":22},{"ruleId":"208","severity":1,"message":"209","line":143,"column":9,"nodeType":"202","endLine":143,"endColumn":45},{"ruleId":"208","severity":1,"message":"209","line":146,"column":9,"nodeType":"202","endLine":146,"endColumn":44},{"ruleId":"208","severity":1,"message":"209","line":150,"column":9,"nodeType":"202","endLine":150,"endColumn":44},{"ruleId":"208","severity":1,"message":"209","line":153,"column":9,"nodeType":"202","endLine":153,"endColumn":44},{"ruleId":"184","severity":1,"message":"196","line":21,"column":21,"nodeType":"186","messageId":"187","endLine":21,"endColumn":26},{"ruleId":"193","severity":1,"message":"211","line":32,"column":6,"nodeType":"198","endLine":32,"endColumn":8,"suggestions":"212"},{"ruleId":"184","severity":1,"message":"213","line":7,"column":10,"nodeType":"186","messageId":"187","endLine":7,"endColumn":21},{"ruleId":"184","severity":1,"message":"196","line":19,"column":21,"nodeType":"186","messageId":"187","endLine":19,"endColumn":26},{"ruleId":"193","severity":1,"message":"211","line":43,"column":6,"nodeType":"198","endLine":43,"endColumn":8,"suggestions":"214"},{"ruleId":"200","severity":1,"message":"201","line":135,"column":29,"nodeType":"202","endLine":143,"endColumn":31},{"ruleId":"184","severity":1,"message":"215","line":1,"column":38,"nodeType":"186","messageId":"187","endLine":1,"endColumn":44},{"ruleId":"184","severity":1,"message":"216","line":207,"column":13,"nodeType":"186","messageId":"187","endLine":207,"endColumn":17},{"ruleId":"184","severity":1,"message":"217","line":26,"column":9,"nodeType":"186","messageId":"187","endLine":26,"endColumn":19},{"ruleId":"200","severity":1,"message":"201","line":70,"column":13,"nodeType":"202","endLine":70,"endColumn":73},{"ruleId":"193","severity":1,"message":"218","line":179,"column":6,"nodeType":"198","endLine":179,"endColumn":8,"suggestions":"219"},{"ruleId":"200","severity":1,"message":"201","line":184,"column":9,"nodeType":"202","endLine":184,"endColumn":73},{"ruleId":"184","severity":1,"message":"217","line":22,"column":9,"nodeType":"186","messageId":"187","endLine":22,"endColumn":19},{"ruleId":"200","severity":1,"message":"201","line":70,"column":11,"nodeType":"202","endLine":70,"endColumn":71},{"ruleId":"193","severity":1,"message":"218","line":192,"column":6,"nodeType":"198","endLine":192,"endColumn":8,"suggestions":"220"},{"ruleId":"200","severity":1,"message":"201","line":197,"column":9,"nodeType":"202","endLine":197,"endColumn":73},{"ruleId":"184","severity":1,"message":"190","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":14},{"ruleId":"184","severity":1,"message":"207","line":4,"column":10,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"200","severity":1,"message":"201","line":10,"column":9,"nodeType":"202","endLine":10,"endColumn":72},{"ruleId":"184","severity":1,"message":"221","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":14},{"ruleId":"184","severity":1,"message":"188","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":1,"column":27,"nodeType":"186","messageId":"187","endLine":1,"endColumn":36},{"ruleId":"184","severity":1,"message":"189","line":5,"column":8,"nodeType":"186","messageId":"187","endLine":5,"endColumn":13},{"ruleId":"200","severity":1,"message":"201","line":22,"column":13,"nodeType":"202","endLine":22,"endColumn":76},{"ruleId":"184","severity":1,"message":"207","line":4,"column":10,"nodeType":"186","messageId":"187","endLine":4,"endColumn":14},{"ruleId":"200","severity":1,"message":"201","line":21,"column":9,"nodeType":"202","endLine":21,"endColumn":72},{"ruleId":"222","severity":1,"message":"223","line":82,"column":13,"nodeType":"224","messageId":"225","endLine":82,"endColumn":21},{"ruleId":"208","severity":1,"message":"210","line":269,"column":23,"nodeType":"202","endLine":271,"endColumn":24},{"ruleId":"208","severity":1,"message":"210","line":275,"column":23,"nodeType":"202","endLine":275,"endColumn":68},{"ruleId":"208","severity":1,"message":"210","line":331,"column":15,"nodeType":"202","endLine":338,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","'styles' is defined but never used.","'useNavigate' is defined but never used.","'setOpenModalForConfirm' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'mastrId'. Either include it or remove the dependency array.","ArrayExpression",["226"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"227","text":"228"},"'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["229"],"'useLocation' is defined but never used.",["230"],"'useRef' is defined but never used.","'data' is assigned a value but never used.","'closeModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setModalOpen'. Either include it or remove the dependency array. If 'setModalOpen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["231"],["232"],"'Auth' is defined but never used.","no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected",{"desc":"233","fix":"234"},[6228,6228]," rel=\"noreferrer\"",{"desc":"235","fix":"236"},{"desc":"235","fix":"237"},{"desc":"238","fix":"239"},{"desc":"238","fix":"240"},"Update the dependencies array to be: [mastrId]",{"range":"241","text":"242"},"Update the dependencies array to be: [navigate]",{"range":"243","text":"244"},{"range":"245","text":"244"},"Update the dependencies array to be: [setModalOpen]",{"range":"246","text":"247"},{"range":"248","text":"247"},[2955,2957],"[mastrId]",[1180,1182],"[navigate]",[1295,1297],[4655,4657],"[setModalOpen]",[5018,5020]]