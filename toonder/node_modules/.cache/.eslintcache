[{"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/index.js":"1","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/App.js":"2","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid_after.js":"3","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid.js":"4","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonInfo.js":"5","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonList.js":"6","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/freeboard.js":"7","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/newpw.js":"8","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/login/login.js":"9","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findpw.js":"10","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/main_page.js":"11","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/infoChange.js":"12","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/join/join.js":"13","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mypage.js":"14","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackSmall.js":"15","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/ID_background.js":"16","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/supabase.js":"17","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackground.js":"18","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/backGround.js":"19","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/write.js":"20","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/postview.js":"21","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/modal.js":"22","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/edit.js":"23","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/searchWebtoonList.js":"24"},{"size":185,"mtime":1686221338991,"results":"25","hashOfConfig":"26"},{"size":2012,"mtime":1686221338979,"results":"27","hashOfConfig":"26"},{"size":850,"mtime":1685814123816,"results":"28","hashOfConfig":"26"},{"size":956,"mtime":1685814123816,"results":"29","hashOfConfig":"26"},{"size":18821,"mtime":1686250872268,"results":"30","hashOfConfig":"26"},{"size":5969,"mtime":1686221338981,"results":"31","hashOfConfig":"26"},{"size":3898,"mtime":1686221338980,"results":"32","hashOfConfig":"26"},{"size":4371,"mtime":1686221338980,"results":"33","hashOfConfig":"26"},{"size":5398,"mtime":1686221338981,"results":"34","hashOfConfig":"26"},{"size":3340,"mtime":1686221338980,"results":"35","hashOfConfig":"26"},{"size":8337,"mtime":1686250944146,"results":"36","hashOfConfig":"26"},{"size":10658,"mtime":1686251175106,"results":"37","hashOfConfig":"26"},{"size":8960,"mtime":1686221338980,"results":"38","hashOfConfig":"26"},{"size":14687,"mtime":1686251371238,"results":"39","hashOfConfig":"26"},{"size":6227,"mtime":1686221338979,"results":"40","hashOfConfig":"26"},{"size":494,"mtime":1686221338979,"results":"41","hashOfConfig":"26"},{"size":486,"mtime":1686221338982,"results":"42","hashOfConfig":"26"},{"size":1817,"mtime":1686250872268,"results":"43","hashOfConfig":"26"},{"size":910,"mtime":1686221338979,"results":"44","hashOfConfig":"26"},{"size":3302,"mtime":1686221338980,"results":"45","hashOfConfig":"26"},{"size":11335,"mtime":1686221338980,"results":"46","hashOfConfig":"26"},{"size":268,"mtime":1686221338981,"results":"47","hashOfConfig":"26"},{"size":4064,"mtime":1686221338980,"results":"48","hashOfConfig":"26"},{"size":5962,"mtime":1686221338981,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1l67g9a",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"53"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"53"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"53"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"53"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"53"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"53"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"53"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"53"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"53"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"53"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"53"},"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/index.js",[],[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/App.js",["138","139","140"],[],"import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Join from './component/join/join';\nimport React, { useEffect, useState } from 'react';\nimport Newpw from './component/find/newpw';\nimport Findpw from './component/find/findpw';\nimport Login from './component/login/login';\nimport Mainpage from './component/main/main_page';\nimport MainWebtoonList from './component/main/mainWebtoonList';\nimport MainBacksmall from './component/backgrounds/mainBackSmall';\nimport MainWebtoonInfo from './component/main/mainWebtoonInfo';\nimport Mypage from './component/main/mypage';\nimport Freeboard from './component/freeboard/freeboard';\nimport InfoC from './component/main/infoChange';\nimport Write from './component/freeboard/write';\nimport PostView from './component/freeboard/postview';\nimport Edit from './component/freeboard/edit';\nimport SearchWebtoonList from './component/main/searchWebtoonList';\nimport axios from 'axios';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Login />} />\n          <Route path=\"/main_page\" element={<Mainpage />} />\n          <Route path=\"/findpw\" element={<Findpw />} />\n          <Route path=\"/mainWebtoonList\" element={<MainWebtoonList />} />\n          <Route path=\"/mainbackground\" element={<MainBacksmall />} />\n          <Route path=\"/mainwebtooninfo\" element={<MainWebtoonInfo />} />\n          <Route path=\"/freeboard\" element={<Freeboard />} />\n          <Route path=\"/mypage\" element={<Mypage />} />\n          <Route path=\"/infochange\" element={<InfoC />} />\n          <Route path=\"/newpw\" element={<Newpw />} />\n          <Route path=\"/join\" element={<Join />} />\n          <Route path=\"/write\" element={<Write />} />\n          <Route path=\"/postview\" element={<PostView />} />\n          <Route path=\"/edit\" element={<Edit />} />\n          <Route path=\"/search\" element={<SearchWebtoonList />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid_after.js",["141"],[],"import React from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport IDBackground from '../backgrounds/ID_background';\nimport styles from '../../style.css';\n\n\nfunction Findid_after() {\n  const navigate = useNavigate();\n\n  return (\n    <IDBackground text=\"Find ID\">\n      <div className=\"findid_body\">\n        <h1>이거 보이면 됨 제발 ㅜㅜ</h1>\n        <div className=\"findIdAfterButtonset\">\n          <button\n            onClick={() => {\n              navigate('/findpw');\n            }}\n            id=\"find_pw_button\">\n              비밀번호 찾기\n          </button>\n\n          <button\n            onClick={() => {\n              navigate('/');\n            }}\n            id=\"loginButton\">\n              확인\n            </button>\n          </div>\n      </div>\n    </IDBackground>\n  );\n}\n\nexport default Findid_after;\n\n",[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonInfo.js",["142","143","144","145","146"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonList.js",["147","148","149","150"],[],"import React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mainPage.css';\nimport axios from 'axios';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport toTop from '../../images/toTop.png';\nimport MainBackSmall from '../backgrounds/mainBackSmall';\nimport { FaSpinner } from 'react-icons/fa'; // 로딩 아이콘 추가\n\nfunction MainWebtoonList() {\n  useEffect(() => {\n    document.title = 'Toonder 웹툰 목록';\n  }, []);\n  const [webtoonList, setWebToonList] = useState([]);\n  const [countPage, setCountPage] = useState(1);\n  const [firstLoading, setFirstLoading] = useState(true);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showNavigationToScrollTop, setShowNavigationToScrollTop] =\n    useState(false);\n\n  const navigate = useNavigate();\n\n  function onScroll() {\n    const windowHeight =\n      window.innerHeight || document.documentElement.clientHeight;\n    const documentHeight = document.documentElement.scrollHeight;\n    const scrolledToBottom =\n      Math.ceil(window.scrollY + windowHeight) >= documentHeight;\n\n    //console.log(window.scrollY)\n    if (window.scrollY === 0) {\n      setShowNavigationToScrollTop(false);\n    } else {\n      setShowNavigationToScrollTop(true);\n    }\n\n    if (scrolledToBottom) {\n      setIsLoading(true);\n      setCountPage(countPage + 1);\n    }\n  }\n\n  useEffect(() => {\n    //console.log(showNavigationToScrollTop)\n    if (!isLoading) {\n      window.addEventListener('scroll', onScroll);\n      return () => {\n        window.removeEventListener('scroll', onScroll);\n      };\n    }\n  });\n\n  useEffect(() => {\n    axios.get('toonder/webtoon?p_num=' + countPage).then((res) => {\n      if (webtoonList.length === 0) {\n        setIsLoading(false);\n        setWebToonList(res.data);\n        setFirstLoading(false);\n      } else {\n        setIsLoading(false);\n        setWebToonList(webtoonList.concat(res.data));\n      }\n    });\n  }, [countPage]);\n\n  const listCreator = () => {\n    var countForTrSplit = 1;\n    var trWebtoonList = [];\n    return (\n      <>\n        {firstLoading ? (\n          <div\n            style={{\n              fontSize: '30px',\n              color: 'white',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              height: '60px',\n            }}\n          >\n            <FaSpinner className=\"loadingIcon\" />\n          </div>\n        ) : (\n          <>\n            <table>\n              {webtoonList.map((webtoonInfo) => {\n                if (countForTrSplit === 1) {\n                  trWebtoonList = [];\n                }\n\n                trWebtoonList.push(webtoonInfo);\n                if (countForTrSplit === 4) {\n                  countForTrSplit = 1;\n                  return (\n                    <tr>\n                      <tr>\n                        {trWebtoonList.map((trWebtoonInfo) => (\n                          <td>\n                            <tr>\n                              <td>\n                                <button\n                                  onClick={() => {\n                                    navigate('/mainwebtooninfo', {\n                                      state: { mastrId: trWebtoonInfo.mastrId },\n                                    });\n                                  }}\n                                >\n                                  <img\n                                    src={trWebtoonInfo.imageDownloadUrl}\n                                    alt=\"image error\"\n                                  />\n                                </button>\n                              </td>\n                            </tr>\n                            <tr style={{ height: '65px' }}>\n                              <td style={{ height: '75px' }}>\n                                <p\n                                  className=\"webtoonTitle\"\n                                  style={{\n                                    fontSize: '18px',\n                                    color: 'white',\n                                    textAlign: 'center',\n                                  }}\n                                >\n                                  {trWebtoonInfo.title}\n                                </p>\n                              </td>\n                            </tr>\n                          </td>\n                        ))}\n                      </tr>\n                    </tr>\n                  );\n                } else {\n                  countForTrSplit += 1;\n                }\n              })}\n            </table>\n            {isLoading ? ( // 로딩 중일 때의 화면\n              <div\n                style={{\n                  fontSize: '30px',\n                  color: 'white',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  height: '60px',\n                }}\n              >\n                <FaSpinner className=\"loadingIcon\" />\n              </div>\n            ) : (\n              <div></div>\n            )}\n          </>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <>\n      <MainBackgorund>\n        <MainBackSmall>\n          <div className=\"mainWebtoonList\">{listCreator()}</div>\n\n          {showNavigationToScrollTop ? (\n            <div\n              onClick={() => {\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n              }}\n              style={{\n                width: '50px',\n                height: '50px',\n                position: 'fixed',\n                bottom: '10%',\n                right: '5%',\n                opacity: '70%',\n              }}\n            >\n              <img\n                src={toTop}\n                alt=\"To Top\"\n                style={{ height: '100%', wigth: '100%' }}\n              />\n            </div>\n          ) : null}\n        </MainBackSmall>\n      </MainBackgorund>\n    </>\n  );\n}\n\nexport default MainWebtoonList;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/freeboard.js",["151","152","153","154","155","156","157"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport './freeboard.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\nimport { FaSpinner } from 'react-icons/fa';\n\nfunction Freeboard() {\n  const navigate = useNavigate();\n  const [posts, setPosts] = useState([]);\n  const [pageNum, setPageNum] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    document.title = 'Toonder 자유게시판';\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`/toonder/board?p_num=${pageNum}`);\n        setPosts(response.data);\n        let total = pageNum;\n        let hasMorePages = true;\n\n        while (hasMorePages) {\n          const response = await axios.get(`/toonder/board?p_num=${total + 1}`);\n          if (response.data.length === 0) {\n            hasMorePages = false;\n          } else {\n            total++;\n          }\n        }\n\n        setTotalPages(total);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, [pageNum]);\n\n  const goToPage = (page) => {\n    setPageNum(page);\n  };\n\n  const goToPrevPage = () => {\n    if (pageNum > 1) {\n      setPageNum(pageNum - 1);\n    }\n  };\n\n  const goToNextPage = () => {\n    if (pageNum < totalPages) {\n      setPageNum(pageNum + 1);\n    }\n  };\n\n  const goToFirstPage = () => {\n    setPageNum(1);\n  };\n\n  const goToLastPage = () => {\n    setPageNum(totalPages);\n  };\n\n  const paginationButtons = [];\n  const maxPageButtons = Math.min(totalPages, 5);\n\n  let startPage = Math.max(1, pageNum - 2);\n  if (startPage + maxPageButtons > totalPages) {\n    startPage = totalPages - maxPageButtons + 1;\n  }\n\n  for (let i = startPage; i < startPage + maxPageButtons; i++) {\n    paginationButtons.push(\n      <a\n        href=\"#\"\n        className={pageNum === i ? 'active' : ''}\n        onClick={() => goToPage(i)}\n      >\n        {i}\n      </a>\n    );\n  }\n\n  return (\n    <MainBackgorund>\n      <div className=\"mainboard\">\n        <br />\n        {loading ? (\n          <div\n            style={{\n              fontSize: '120px',\n              color: 'white',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              position: 'relative',\n              top: '40%',\n            }}\n          >\n            <FaSpinner className=\"loadingIcon\" />\n          </div>\n        ) : (\n          <>\n            <h2>자유게시판</h2>\n            <ul>\n              {posts.map((post) => (\n                <li key={post.brdNo}>\n                  <div className=\"link-wrapper\">\n                    <a\n                      onClick={() => {\n                        navigate('/postview', {\n                          state: { brdNo: post.brdNo },\n                        });\n                      }}\n                    >\n                      {post.brdTitle}\n                    </a>\n                    <div className=\"meta\">\n                      <span>{post.mem_name}</span>\n                      <span>|</span>\n                      <span>⚯ {post.brdViewCount}</span>\n                      <span>|</span>\n                      <span>☺ {post.brdLike}</span>\n                      <span>|</span>\n                      <span>{post.brdRegDate.split('T')[0]}</span>\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n      {!loading && (\n        <button\n          id=\"freewrite\"\n          style={{ marginTop: '-590px' }}\n          onClick={() => {\n            navigate('/write');\n          }}\n        >\n          글쓰기\n        </button>\n      )}\n    </MainBackgorund>\n  );\n}\n\nexport default Freeboard;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/newpw.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/login/login.js",["158","159"],[],"import React, { useState, useEffect } from 'react';\nimport styles from './login.module.css'; //CSS Module 이라는 기술을 사용하면, CSS 클래스가 중첩되는 것을 완벽히 방지할 수 있음\nimport IDBackground from '../backgrounds/ID_background';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../supabase';\nimport { FaSpinner } from 'react-icons/fa';\nfunction Login() {\n  useEffect(() => {\n    document.title = 'Toonder 로그인';\n  }, []);\n  const [email, setEmail] = useState(''); //이메일 값\n  const [password, setPw] = useState(''); //비밀번호 값\n  const [emailValid, setEmailValid] = useState(false); //이메일 유효성\n  const [pwValid, setPwValid] = useState(false); //비밀번호 유효성\n  const [notAllow, setNotAllow] = useState(true); //로그인 (submit)버튼 활성화 여부\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // 이미 로그인된 상태인지 확인\n    const checkLoggedIn = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session !== null) {\n        // 이미 로그인된 상태라면 로그아웃하고 메인 페이지로 이동\n        alert('이미 로그인되어 있습니다.');\n        navigate('/main_page'); // 메인 페이지로 이동\n      }\n    };\n\n    checkLoggedIn();\n  }, []);\n\n  const onClickConfirm = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password,\n      });\n\n      if (error) {\n        alert('로그인에 실패했습니다.');\n        console.log(error);\n      } else if (data) {\n        alert('로그인 되었습니다.');\n\n        sessionStorage.setItem('loggedUserEmail', email); // 로그인 하면 sessionStorage에 email이 저장됨\n        navigate('/main_page'); // 로그인 성공 시 대시보드 페이지로 이동\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    //이메일 유효성과 비밀번호 유효성이 바꼈을때 둘다 유효한 경우만 login버튼 활성화 해주는 기능\n    if (emailValid && pwValid) setNotAllow(false);\n    else setNotAllow(true);\n    return;\n  }, [emailValid, pwValid]);\n\n  const handleEmail = (e) => {\n    //이메일 값을 value에 state\n    setEmail(e.target.value);\n    const regex = //이메일 유효성검사 하기위한 객체\n      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n    if (regex.test(e.target.value)) {\n      setEmailValid(true);\n    } else {\n      setEmailValid(false);\n    }\n  };\n\n  const handlePW = (e) => {\n    //위와 마찬가지 비밀번호인 경우\n    setPw(e.target.value);\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setPwValid(true);\n    } else {\n      setPwValid(false);\n    }\n  };\n\n  return (\n    //클래스를 설정할땐 styles객체안에 있는 값을 참조하는 방식\n    <div>\n      <IDBackground text=\"Login\">\n        {loading ? (\n          <div\n            style={{\n              fontSize: '80px',\n              color: 'white',\n              display: 'flex',\n              alignItems: 'center',\n              top: '290px',\n              position: 'absolute',\n            }}\n          >\n            <FaSpinner className={styles.loadingIcon} />\n          </div>\n        ) : (\n          <form>\n            <div className={styles.Login}>\n              <div>\n                {!emailValid &&\n                  email.length > 0 && ( //이메일이 유효하지 않고 이메일을 입력하기 시작하면 에러 메세지가 뜸\n                    <div>올바른 이메일을 입력해주세요</div>\n                  )}\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={email}\n                  onChange={handleEmail}\n                  placeholder=\"Enter your e-mail\"\n                />\n              </div>\n              <div>\n                {!pwValid && password.length > 0 && (\n                  <div>영문, 숫자 포함 8~10자 입력해주세요</div> //비밀번호가 유효하지 않고 비밀번호를 입력하기 시작하면 에러 메세지가 뜸\n                )}\n              </div>\n              <div>\n                <input\n                  type=\"password\"\n                  value={password}\n                  onChange={handlePW}\n                  placeholder=\"Enter your password\"\n                />\n              </div>\n              <button\n                onClick={onClickConfirm}\n                disabled={notAllow}\n                type=\"submit\"\n              >\n                <strong>Login</strong>\n              </button>\n            </div>\n          </form>\n        )}\n      </IDBackground>\n      <div className={styles.FindnSign}>\n        <button\n          onClick={() => {\n            navigate('/findpw');\n          }}\n          id=\"find_pw_button\"\n        >\n          Find\n        </button>\n        &nbsp;&nbsp;|&nbsp;&nbsp;\n        <button\n          onClick={() => {\n            navigate('/join');\n          }}\n          id=\"join\"\n        >\n          Join\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findpw.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/main_page.js",["160","161","162","163","164","165"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/infoChange.js",["166"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/join/join.js",["167"],[],"import React, { useState, useEffect } from 'react';\nimport Background from '../backgrounds/backGround';\nimport supabase from '../supabase';\nimport styles from './join.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { FaSpinner } from 'react-icons/fa';\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 160px;\n  overflow-y: auto;\n  border: 1px solid #ccc;\n  padding: 10px;\n  width: 470px;\n  transform: translateX(5%);\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: 455px;\n  border-radius: 10px;\n  background-color: white;\n  color: grey;\n\n  /* 스크롤 스타일 적용 */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  width: 50%;\n  margin-bottom: 5px;\n`;\n\nconst CheckboxInput = styled.input`\n  margin-right: 15px;\n  margin-left: 65px;\n`;\n\nfunction Join() {\n  useEffect(() => {\n    document.title = 'Toonder 회원가입';\n  }, []);\n  const [pw, setPw] = useState(''); //비밀번호 값\n  const [pwc, setPwc] = useState(''); //비밀번호 확인 값\n  const [isPwCheck, setIsPwCheck] = useState(false); //비밀번호 확인 여부\n  const [isPwValid, setIsPwValid] = useState(false); //비밀번호 유효성 여부\n  const [firstName, setFirstName] = useState(''); //이름 값\n  const [lastName, setLastName] = useState(''); //성씨 값\n  const [email, setEmail] = useState(''); //이메일 값\n  const [notAllow, setNotAllow] = useState(true); //회원가입 버튼 활성화 여부\n  const [isValidEmail, setEmailValid] = useState(false); //이메일 유효성 여부\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [selectedHashtags, setSelectedHashtags] = useState([]);\n\n  const handleCheckboxChange = (event) => {\n    const { value, checked } = event.target;\n    if (checked) {\n      setSelectedHashtags((prevSelectedHashtags) => [\n        ...prevSelectedHashtags,\n        value,\n      ]);\n    } else {\n      setSelectedHashtags((prevSelectedHashtags) =>\n        prevSelectedHashtags.filter((hashtag) => hashtag !== value)\n      );\n    }\n  };\n\n  const hashtagOptions = [\n    '공포',\n    '드라마',\n    '코믹',\n    '일상',\n    '판타지',\n    '액션',\n    '역사',\n    '학원',\n    'SF',\n    '학습만화',\n    '캠페인',\n    '스포츠',\n    '동성애',\n    '추리',\n    '모험',\n    '무협',\n    '시사',\n    '교양',\n    '요리',\n    '성인',\n    '순정',\n    'BL',\n    '소년',\n    '미스터리',\n    'GL',\n    '로맨스판타지',\n    '카툰',\n    '기관발행물',\n    '만화이론',\n    '로맨스',\n    '그래픽노블',\n    '개그',\n  ];\n\n  useEffect(() => {\n    if (\n      isValidEmail &&\n      isPwCheck &&\n      isPwValid &&\n      firstName.length > 0 &&\n      lastName.length > 0 &&\n      selectedHashtags.length > 0\n    )\n      setNotAllow(false);\n    else setNotAllow(true);\n    return;\n  }, [\n    isValidEmail,\n    isPwValid,\n    isPwCheck,\n    firstName,\n    lastName,\n    selectedHashtags,\n  ]);\n\n  const handleFirstName = (e) => {\n    setFirstName(e.target.value);\n  };\n\n  const handleLastName = (e) => {\n    setLastName(e.target.value);\n  };\n\n  const handlePW = (e) => {\n    setPw(e.target.value);\n\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setIsPwValid(true);\n    } else {\n      setIsPwValid(false);\n    }\n\n    if (e.target.value === pwc) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleEmail = (e) => {\n    setEmail(e.target.value);\n    const regex =\n      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n    if (regex.test(e.target.value)) {\n      setEmailValid(true);\n    } else {\n      setEmailValid(false);\n    }\n  };\n\n  const handleCheckPw = (e) => {\n    setPwc(e.target.value);\n\n    if (pw === e.target.value) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    //////////////체크박스로 입력받은 해시태그는 공백으로 단어가 분리된 문자열로 저장을 해서 데이터로 보냄\n    setLoading(true);\n    const hashtag = '#' + selectedHashtags.join(' #');\n    axios\n      .post('toonder/join', {\n        mem_email: email,\n        mem_name: lastName + firstName,\n        mem_hashtag: hashtag,\n      })\n      .catch(function () {\n        console.log('Error for sending user data to Spring - creating member');\n      });\n\n    e.preventDefault();\n\n    const { data, error } = await supabase.auth.signUp({\n      email: email,\n      password: pw,\n    });\n\n    if (error) {\n      alert(error);\n      setLoading(false);\n    } else alert('인증 메일을 발송했습니다. 이메일 확인 후 로그인해주세요.');\n    navigate('/');\n  };\n\n  return (\n    <Background text=\"Join\" backgroundSize=\"600px 500px\">\n      {loading ? (\n        <div\n          style={{\n            fontSize: '120px',\n            color: 'white',\n            display: 'flex',\n            alignItems: 'center',\n            top: '385px',\n            position: 'absolute',\n          }}\n        >\n          <FaSpinner className={styles.loadingIcon} />\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <div className={styles.name}>\n            <input\n              type=\"text\"\n              onChange={handleFirstName}\n              id=\"firstName\"\n              placeholder=\"이름\"\n            />\n            <input\n              type=\"text\"\n              onChange={handleLastName}\n              id=\"lastName\"\n              placeholder=\"성\"\n            />\n          </div>\n          <div className={styles.email}>\n            {!isValidEmail && email.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                }}\n              >\n                올바른 이메일을 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={handleEmail}\n              placeholder=\"이메일 입력\"\n            />\n          </div>\n          <div className={styles.password}>\n            {!isPwValid && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                }}\n              >\n                영문, 숫자 포함 8~10자 이상 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handlePW}\n              value={pw}\n              placeholder=\"비밀번호\"\n            />\n            {!isPwCheck && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '270px',\n                  fontWeight: 'normal',\n                }}\n              >\n                비밀번호를 한번 더 정확히 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handleCheckPw}\n              value={pwc}\n              placeholder=\"비밀번호 확인\"\n            />\n          </div>\n          {!selectedHashtags.length > 0 && (\n            <div\n              style={{\n                position: 'absolute',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '70%',\n                  top: '-10px',\n                }}\n              >\n                좋아하는 만화 장르를 1개 이상 선택\n              </div>\n            </div>\n          )}\n\n          <CheckboxContainer>\n            {hashtagOptions.map((hashtag) => (\n              <CheckboxLabel key={hashtag}>\n                <CheckboxInput\n                  type=\"checkbox\"\n                  value={hashtag}\n                  onChange={handleCheckboxChange}\n                />\n                {hashtag}\n              </CheckboxLabel>\n            ))}\n          </CheckboxContainer>\n          <div>\n            <button className={styles.submit} disabled={notAllow} type=\"submit\">\n              <strong>Join</strong>\n            </button>\n          </div>\n        </form>\n      )}\n    </Background>\n  );\n}\nexport default Join;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mypage.js",["168","169","170","171","172","173"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackSmall.js",["174","175","176","177"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './backGround.module.css';\nimport ex1 from '../../images/ex1.png';\nimport axios from 'axios';\nimport supabase from '../supabase';\n\nfunction MainBackSmall(props) {\n  const navigate = useNavigate();\n  const [loggedUserName, setLoggedUserName] = useState(\n    localStorage.getItem('loggedUserName')\n  );\n  const [loggedUserImage, setLoggedUserImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await supabase.auth.getSession();\n      const email = data.session.user.email;\n      const requestData = {\n        email: email,\n      };\n\n      if (!localStorage.getItem('loggedUserName')) {\n        axios\n          .post('toonder/name', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_name);\n            setLoggedUserName(loggedUserData.data.mem_name);\n            localStorage.setItem(\n              'loggedUserName',\n              loggedUserData.data.mem_name\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n\n      if (!localStorage.getItem('loggedUserPhoto')) {\n        axios\n          .post('toonder/photo', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_photo);\n            setLoggedUserImage(loggedUserData.data.mem_photo);\n            localStorage.setItem(\n              'loggedUserPhoto',\n              loggedUserData.data.mem_photo\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"mainBackSmall\">\n      <div className=\"mainInfo\">\n        <div onClick={openModal}>\n          <img id=\"infoimg\" src={loggedUserImage} alt=\"image error\" />\n        </div>\n        <h2 style={{ color: 'white' }}>{loggedUserName}</h2>\n        <button\n          id=\"changeInfo\"\n          onClick={() => {\n            navigate('/infochange');\n          }}\n        >\n          <h3>정보수정</h3>\n        </button>\n      </div>\n      <div className=\"mainButtonSet\">\n        <button\n          id=\"webtoonList\"\n          onClick={() => {\n            navigate('/mainWebtoonList');\n          }}\n        >\n          웹툰 목록\n        </button>\n        <button\n          id=\"mypage\"\n          onClick={() => {\n            navigate('/mypage');\n          }}\n        >\n          마이페이지\n        </button>\n        <button\n          id=\"freeBoard\"\n          onClick={() => {\n            navigate('/freeboard');\n          }}\n        >\n          자유게시판\n        </button>\n        <button\n          id=\"logOut\"\n          onClick={async () => {\n            localStorage.removeItem('loggedUserPhoto');\n            localStorage.removeItem('loggedUserName');\n            localStorage.removeItem('loggedUserHashTag');\n            sessionStorage.removeItem('loggedUserEmail'); // 세션 스토리지에서 loggedUserEmail 제거\n            alert('로그아웃 되었습니다.');\n            await supabase.auth.signOut();\n            navigate('/');\n          }}\n        >\n          로그아웃\n        </button>\n      </div>\n      {modalOpen && (\n        <ModalBasic\n          setModalOpen={setModalOpen}\n          setLoggedUserImage={setLoggedUserImage}\n          openModal={openModal}\n        />\n      )}\n      {props.children}\n    </div>\n  );\n}\n\nfunction ModalBasic({ setModalOpen, setLoggedUserImage, openModal }) {\n  const [selectedImage, setSelectedImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const [newImage, setNewImage] = useState(null);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setSelectedImage(reader.result);\n      setNewImage(file);\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSave = async () => {\n    if (newImage) {\n      console.log('새 이미지 저장:', newImage);\n\n      const { data } = await supabase.auth.getSession();\n      axios\n        .post('toonder/photo/update', {\n          email: data.session.user.email,\n          image: selectedImage,\n        })\n        .then((res) => console.log(res))\n        .catch((error) => console.log(error));\n\n      localStorage.setItem('loggedUserPhoto', selectedImage);\n      setLoggedUserImage(selectedImage);\n    }\n\n    closeModal();\n  };\n\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const handler = (event) => {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        setModalOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handler);\n\n    return () => {\n      document.removeEventListener('mousedown', handler);\n    };\n  }, []);\n\n  return (\n    <div className=\"profilechangeback\">\n      <div className=\"profilechange\" ref={modalRef}>\n        <img id=\"changeinfoimg\" src={selectedImage} alt=\"image error\" />\n        <div id=\"changeFile\">\n          <label htmlFor=\"chooseFile\">\n            <h3>프로필 사진 변경</h3>\n          </label>\n        </div>\n        <div style={{ position: 'relative' }}>\n          <input\n            type=\"file\"\n            id=\"chooseFile\"\n            name=\"chooseFile\"\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            style={{\n              position: 'absolute',\n              right: '-200px',\n              top: '0px',\n              marginTop: '10px',\n            }}\n          />\n        </div>\n        <div id=\"changeButtonSet\" style={{ marginTop: '25px' }}>\n          <button id=\"submitButton\" type=\"submit\" onClick={handleSave}>\n            <h3>저장</h3>\n          </button>\n          <br />\n          <button id=\"cancel\" onClick={closeModal}>\n            <h3>취소</h3>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MainBackSmall;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/ID_background.js",["178","179","180"],[],"import React from 'react';\nimport styles from '../../style.css';\nimport logo from '../../images/logoimage.png';\nimport { Link } from 'react-router-dom';\n\nfunction IDBackground(props) {\n  return (\n    <div className=\"id_background\">\n      <div className=\"find_logo\">\n        <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n        <strong>{props.text}</strong>\n      </div>\n      {props.children} {/* props.children 렌더링 */}\n    </div>\n  );\n}\n\nexport default IDBackground;\n\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/supabase.js",["181"],[],"import { createClient } from '@supabase/supabase-js';\nimport { Auth } from '@supabase/auth-ui-react';\n\nconst supabaseUrl = 'https://fsxogdtxxerrzpdgyyac.supabase.co/';\nconst supabaseKey =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZzeG9nZHR4eGVycnpwZGd5eWFjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODI4NzA4NTQsImV4cCI6MTk5ODQ0Njg1NH0.4ayoRXi9Z0745i2dyqIjvm23CSBRK--iAFspUAy6pOw';\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport default supabase;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackground.js",["182","183","184","185"],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/backGround.js",["186","187"],[],"import React from 'react';\nimport styles from './backGround.module.css';\nimport logo from '../../images/logoimage.png';\nimport { Link } from 'react-router-dom';\n//\nfunction Background(props) {\n  return (\n    <div\n      className={styles.background}\n      style={{ backgroundSize: props.backgroundSize }} //백그라운드 사이즈를 props 객체로 전달해서 컴포넌트마다 사이즈를 조정해서 사용가능\n    >\n      <div\n        className={styles.logo}\n        style={\n          {\n            top: props.top,\n            left: props.left,\n          } /*로고 위치도 props로 전달받아 컴포넌트마다 위치를 조장해서 사용가능 */\n        }\n      >\n        <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n        <strong>{props.text}</strong>\n      </div>\n      {props.children} {/* props.children 렌더링 */}\n    </div>\n  );\n}\n\nexport default Background;","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/write.js",["188","189","190"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './freeboard.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\nimport supabase from '../supabase';\n\nfunction Write() {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [loggedUserName, setLoggedUserName] = useState();\n  const [email, setEmail] = useState();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    document.title = 'Toonder 게시글 작성';\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session === null) {\n        alert('로그인을 먼저 해주세요.');\n        navigate('/');\n      } else {\n        const email = session.user.email;\n        setEmail(email);\n\n        const rdata = {\n          email: email,\n        };\n\n        axios\n          .post('toonder/name', rdata)\n          .then((loggedUserData) => {\n            setLoggedUserName(loggedUserData.data.mem_name);\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n    fetchData();\n  }, []);\n\n  const handleTitleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const handleContentChange = (event) => {\n    setContent(event.target.value);\n  };\n\n  const addConvertLine = (text) => {\n    return text.replace(/\\n/g, '@d`}');\n  };\n  //서브밋\n  const handleSubmit = async () => {\n    if (!title || !content) {\n      alert('제목과 내용을 작성해주세요.');\n      return;\n    }\n\n    const requestData = {\n      brdTitle: title,\n      brdContent: addConvertLine(content),\n      mem_name: loggedUserName,\n      mem_email: email,\n    };\n\n    try {\n      await axios.post('/toonder/board', requestData);\n      alert('글이 저장되었습니다.');\n      navigate(-1);\n    } catch (error) {\n      console.log(error);\n      alert('글을 저장하지 못했습니다.');\n    }\n  };\n\n  return (\n    <MainBackgorund>\n      <div className=\"writeboard\">\n        <br />\n        <h2>글쓰기</h2>\n        <br />\n        <input\n          style={{ fontSize: '20px' }}\n          className=\"title\"\n          type=\"text\"\n          placeholder=\"제목을 작성해주세요\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        <textarea\n          style={{ fontSize: '17px' }}\n          placeholder=\"내용을 작성해주세요.\"\n          value={content}\n          onChange={handleContentChange}\n        ></textarea>\n      </div>\n      <div style={{ position: 'relative' }}>\n        <button\n          id=\"save\"\n          style={{\n            position: 'absolute',\n            fontSize: '20px',\n            height: '36px',\n            color: 'rgb(255, 147, 147)',\n            display: 'flex',\n            backgroundColor: 'white',\n            justifyContent: 'center',\n            alignItems: 'center',\n            fontSize: '22px',\n            width: '80px',\n            borderRadius: '10px',\n            top: '-690px',\n            right: '65px',\n          }}\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          저장\n        </button>\n      </div>\n    </MainBackgorund>\n  );\n}\n\nexport default Write;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/postview.js",["191","192","193","194","195"],[],"import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport MainBackground from '../backgrounds/mainBackground';\nimport styles from './postview.module.css';\nimport supabase from '../supabase';\nfunction PostView() {\n  // 라우터\n  const navigate = useNavigate();\n  const location = useLocation();\n  const brdNo = location.state?.brdNo;\n\n  // state\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [email, setEmail] = useState();\n  const [editedComment, setEditedComment] = useState('');\n  const [editingCommentId, setEditingCommentId] = useState('');\n  const [comment, setComment] = useState('');\n  const [isCommentDelete, setIsCommentDelete] = useState(false);\n  const [isClickCommentLike, setIsClickCommentLike] = useState(false);\n  //줄바꿈기능\n  const convertLine = (text) => {\n    return text.split('@d`}').map((line, index) => (\n      <React.Fragment key={index}>\n        {line}\n        <br />\n      </React.Fragment>\n    ));\n  };\n  const convertLineForTextarea = (text) => {\n    return text.replaceAll('@d`}', '\\n');\n  };\n\n  const addConvertLine = (text) => {\n    return text.replace(/\\n/g, '@d`}');\n  };\n\n  useEffect(() => {\n    document.title = 'Toonder 자유게시판';\n  }, []);\n\n  //이메일 불러오기\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session === null) {\n        alert('로그인을 먼저 해주세요.');\n        navigate('/');\n      } else {\n        const email = session.user.email;\n        setEmail(email);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 게시글 불러오기\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`/toonder/board/${brdNo}`);\n        setPost(response.data);\n      } catch (error) {\n        console.log(error);\n        alert('게시글을 불러오지 못했습니다.');\n      } finally {\n      }\n    };\n\n    fetchData();\n  }, [brdNo]);\n\n  const handleEditContent = () => {\n    if (post.mem_email !== email) {\n      alert('본인의 게시글만 수정이 가능합니다.');\n      return;\n    } else {\n      navigate('/edit', {\n        state: { brdNo: post.brdNo },\n      });\n    }\n  };\n\n  // 댓글 불러오기\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axios.get(`/toonder/board/${brdNo}/comment`);\n        setComments(response.data);\n      } catch (error) {\n        console.log(error);\n        alert('댓글을 불러오지 못했습니다.');\n      } finally {\n        setIsCommentDelete(false);\n        setIsClickCommentLike(false);\n      }\n    };\n\n    fetchComments();\n  }, [brdNo, isCommentDelete, isClickCommentLike]);\n\n  //댓글 좋아요\n  const handleLikeComment = async (cmtNo) => {\n    try {\n      const headers = {\n        mem_email: email,\n      };\n      await axios.post(`/toonder/board/${brdNo}/comment/${cmtNo}/like`, null, {\n        headers,\n      });\n      alert('댓글 좋아요가 반영되었습니다.');\n    } catch (error) {\n      console.log(error);\n      alert('좋아요가 실패 했습니다.');\n    }\n  };\n\n  // 게시글 삭제\n  const handleDelete = async () => {\n    try {\n      await axios.delete(`/toonder/board/${brdNo}`, {\n        data: { mem_email: email },\n      });\n      alert('삭제가 성공했습니다.');\n      navigate('/freeboard');\n    } catch (error) {\n      console.log(error);\n      alert('본인의 게시글만 삭제가 가능합니다.');\n    }\n  };\n\n  //게시글 좋아요\n  const handleLike = async () => {\n    try {\n      const headers = {\n        mem_email: email,\n      };\n      await axios.post(`/toonder/board/${brdNo}/like`, null, {\n        headers,\n      });\n      alert('좋아요가 반영되었습니다.');\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n      alert('좋아요가 실패 했습니다.');\n    }\n  };\n\n  // 댓글 삭제\n  const handleDeleteComment = async (cmtContent, cmtBno) => {\n    try {\n      await axios.delete(`/toonder/board/${brdNo}/comment/${cmtBno}`, {\n        data: { cmtContent: cmtContent, mem_email: email },\n      });\n      alert('댓글이 삭제되었습니다.');\n      setIsCommentDelete(true);\n    } catch (error) {\n      console.log(error);\n      alert('본인의 댓글만 수정이 가능합니다.');\n    }\n  };\n\n  // 댓글 수정\n  const handleEditComment = (commentId, content) => {\n    setEditingCommentId(commentId);\n    setEditedComment(content);\n  };\n\n  // 댓글 수정 보내기\n  const handleSubmitEditedComment = async (commentId) => {\n    if (!editedComment) {\n      alert('댓글을 입력하세요.');\n      return;\n    }\n\n    try {\n      const addLineComment = addConvertLine(editedComment);\n      await axios.put(`/toonder/board/${brdNo}/comment/${commentId}`, {\n        cmtContent: addLineComment,\n        mem_email: email,\n      });\n      alert('댓글이 수정되었습니다.');\n      setEditingCommentId(null);\n      setEditedComment('');\n\n      const response = await axios.get(`/toonder/board/${brdNo}/comment`);\n      setComments(response.data);\n    } catch (error) {\n      console.log(error);\n      alert('본인의 댓글만 수정이 가능합니다.');\n      setEditingCommentId(null);\n    }\n  };\n\n  // 댓글 보내기\n  const handleSubmitComment = async (e) => {\n    e.preventDefault();\n    if (!comment) {\n      alert('댓글을 입력하세요.');\n      return;\n    }\n    const name = localStorage.getItem('loggedUserName');\n    try {\n      const addLineComment = addConvertLine(comment);\n      await axios.post(`/toonder/board/${brdNo}/comment`, {\n        cmtContent: addLineComment,\n        mem_name: name,\n        mem_email: email,\n      });\n      alert('댓글이 작성되었습니다.');\n      setComment('');\n\n      const response = await axios.get(`/toonder/board/${brdNo}/comment`);\n      setComments(response.data);\n    } catch (error) {\n      console.log(error);\n      alert('댓글 작성에 실패했습니다.');\n    }\n  };\n\n  // 게시글 목록을 불러오고나서 랜딩하기 위함\n  if (!post) {\n    return null;\n  }\n\n  const { brdTitle, brdContent, mem_name, brdRegDate, brdViewCount, brdLike } =\n    post;\n  const formattedDate = brdRegDate.split('T')[0];\n\n  return (\n    <MainBackground>\n      <div className=\"postboard\">\n        <br />\n        <h2>자유게시판</h2>\n        <br />\n        <div id=\"postinfo\">\n          <h1>{brdTitle}</h1>\n          <br />\n          <h4>\n            {mem_name} &nbsp;|&nbsp; 조회수 : {brdViewCount} &nbsp;|&nbsp;{' '}\n            {formattedDate} &nbsp;|&nbsp; 좋아요 : {brdLike}\n            <div className={styles.contentButtons}>\n              <button\n                onClick={() => {\n                  handleLike();\n                }}\n              >\n                ☺︎\n              </button>{' '}\n              &nbsp;|&nbsp;{' '}\n              <button\n                onClick={() => {\n                  handleEditContent();\n                }}\n              >\n                수정\n              </button>{' '}\n              &nbsp;|&nbsp; <button onClick={handleDelete}>삭제</button>\n            </div>\n          </h4>\n        </div>\n        <div id=\"postcontent\">\n          <h3>[내용]</h3>\n          <div\n            style={{\n              borderTop: '1px solid rgb(255, 147, 147)',\n              width: '100%',\n              margin: '10px 0',\n            }}\n          />\n          <br />\n          <p>{convertLine(brdContent)}</p>\n        </div>\n        <div id=\"repl2\">\n          <h3>[댓글]</h3>\n          <div\n            style={{\n              borderTop: '1px solid rgb(255, 147, 147)',\n              width: '100%',\n              margin: '10px 0',\n            }}\n          />\n          {comments.map((comment) => (\n            <div key={comment.cmtNo}>\n              <br />\n              {editingCommentId === comment.cmtNo ? (\n                <>\n                  &nbsp;&nbsp;\n                  <textarea\n                    className={styles.editedCommentInput}\n                    value={convertLineForTextarea(editedComment)}\n                    onChange={(e) => setEditedComment(e.target.value)}\n                  ></textarea>\n                  <div className={styles.metaDataWrap}>\n                    <div className={styles.metaData}>\n                      <a\n                        onClick={() => handleSubmitEditedComment(comment.cmtNo)}\n                      >\n                        수정 완료\n                      </a>{' '}\n                      |{' '}\n                      <a onClick={() => setEditingCommentId(null)}>수정 취소</a>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <>\n                  {' '}\n                  {comment.memName}\n                  <div className={styles.wrapContent}>\n                    : {convertLine(comment.cmtContent)}\n                  </div>\n                  <div className={styles.metaDataWrap}>\n                    <p className={styles.metaData}>\n                      {comment.cmtRegDate.split('T')[0]} &nbsp;|&nbsp; 좋아요 :{' '}\n                      {comment.cmtLike}\n                      <div className={styles.commentClicker}>\n                        <button\n                          onClick={() => {\n                            handleLikeComment(comment.cmtNo);\n                            setIsClickCommentLike(true);\n                          }}\n                        >\n                          ☺︎\n                        </button>{' '}\n                        |{' '}\n                        <button\n                          onClick={() =>\n                            handleEditComment(comment.cmtNo, comment.cmtContent)\n                          }\n                        >\n                          수정\n                        </button>{' '}\n                        |{' '}\n                        <button\n                          onClick={() =>\n                            handleDeleteComment(\n                              comment.cmtContent,\n                              comment.cmtNo\n                            )\n                          }\n                        >\n                          삭제\n                        </button>{' '}\n                      </div>\n                    </p>\n                  </div>\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n        <div id=\"commentwrite\">\n          <form onSubmit={handleSubmitComment}>\n            <textarea\n              className={styles.commentInput}\n              value={comment}\n              onChange={(e) => setComment(e.target.value)}\n              placeholder=\"댓글을 작성하세요\"\n            ></textarea>\n            <div className={styles.commentSubmit}>\n              <a\n                style={{\n                  position: 'absolute',\n                  fontSize: '24px',\n                }}\n                type=\"submit\"\n                onClick={handleSubmitComment}\n              >\n                작성\n              </a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </MainBackground>\n  );\n}\n\nexport default PostView;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/modal.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/edit.js",["196","197","198"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './freeboard.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\nimport supabase from '../supabase';\nfunction Edit() {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [loggedUserName, setLoggedUserName] = useState();\n  const [email, setEmail] = useState();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const brdNo = location.state?.brdNo;\n\n  useEffect(() => {\n    document.title = 'Toonder 게시글수정';\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session === null) {\n        alert('로그인을 먼저 해주세요.');\n        navigate('/');\n      } else {\n        const email = session.user.email;\n        setEmail(email);\n\n        const rdata = {\n          email: email,\n        };\n\n        axios\n          .post('toonder/name', rdata)\n          .then((loggedUserData) => {\n            setLoggedUserName(loggedUserData.data.mem_name);\n          })\n          .catch((error) => console.log(error));\n\n        try {\n          const response = await axios.get(`/toonder/board/${brdNo}`);\n          const postData = response.data;\n          setTitle(postData.brdTitle);\n          setContent(convertLineForTextarea(postData.brdContent));\n          if (postData.mem_email !== email) {\n            alert('본인의 게시글만 수정이 가능합니다.');\n            navigate(-1);\n          }\n        } catch (error) {\n          console.log(error);\n          alert('게시글을 불러오지 못했습니다.');\n          navigate(-1);\n        }\n      }\n    };\n    fetchData();\n  }, []);\n\n  const convertLineForTextarea = (text) => {\n    return text.replaceAll('@d`}', '\\n');\n  };\n\n  const handleTitleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const handleContentChange = (event) => {\n    setContent(event.target.value);\n  };\n\n  const addConvertLine = (text) => {\n    return text.replace(/\\n/g, '@d`}');\n  };\n\n  const handleSubmit = async () => {\n    if (!title || !content) {\n      alert('제목과 내용을 작성해주세요.');\n      return;\n    }\n\n    try {\n      const addLineContent = addConvertLine(content);\n      await axios.put(`/toonder/board/${brdNo}`, {\n        brdTitle: title,\n        brdContent: addLineContent,\n        mem_name: loggedUserName,\n        mem_email: email,\n      });\n      alert('게시글이 수정되었습니다.');\n      navigate(-1);\n    } catch (error) {\n      console.log(error);\n      alert('게시글 수정이 실패했습니다.');\n      navigate(-1);\n    }\n  };\n\n  return (\n    <MainBackgorund>\n      <div className=\"writeboard\">\n        <br />\n        <h2>수정하기</h2>\n        <br />\n        <input\n          style={{ fontSize: '20px' }}\n          className=\"title\"\n          type=\"text\"\n          placeholder=\"제목을 작성해주세요\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        <textarea\n          style={{ fontSize: '17px' }}\n          placeholder=\"내용을 작성해주세요.\"\n          value={content}\n          onChange={handleContentChange}\n        ></textarea>\n      </div>\n      <div style={{ position: 'relative' }}>\n        <button\n          id=\"save\"\n          style={{\n            position: 'absolute',\n            fontSize: '20px',\n            height: '36px',\n            color: 'rgb(255, 147, 147)',\n            display: 'flex',\n            backgroundColor: 'white',\n            justifyContent: 'center',\n            alignItems: 'center',\n            fontSize: '22px',\n            width: '80px',\n            borderRadius: '10px',\n            top: '-690px',\n            right: '65px',\n          }}\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          저장\n        </button>\n      </div>\n    </MainBackgorund>\n  );\n}\n\nexport default Edit;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/searchWebtoonList.js",["199","200","201","202"],[],"import React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './mainPage.css';\nimport axios from 'axios';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport toTop from '../../images/toTop.png';\nimport MainBackSmall from '../backgrounds/mainBackSmall';\nimport { FaSpinner } from 'react-icons/fa'; // 로딩 아이콘 추가\n\nfunction SearchWebtoonList() {\n  useEffect(() => {\n    document.title = 'Toonder 웹툰검색';\n  }, []);\n  const [webtoonList, setWebToonList] = useState([]);\n  const [countPage, setCountPage] = useState(1);\n  const [firstLoading, setFirstLoading] = useState(true);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showNavigationToScrollTop, setShowNavigationToScrollTop] =\n    useState(false);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const searchContent = location.state?.searchContent;\n  console.log(searchContent);\n\n  function onScroll() {\n    const windowHeight =\n      window.innerHeight || document.documentElement.clientHeight;\n    const documentHeight = document.documentElement.scrollHeight;\n    const scrolledToBottom =\n      Math.ceil(window.scrollY + windowHeight) >= documentHeight;\n\n    if (window.scrollY === 0) {\n      setShowNavigationToScrollTop(false);\n    } else {\n      setShowNavigationToScrollTop(true);\n    }\n\n    if (scrolledToBottom) {\n      if (webtoonList.length < 64) {\n      } else {\n        setIsLoading(true);\n        setCountPage(countPage + 1);\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (!isLoading) {\n      window.addEventListener('scroll', onScroll);\n      return () => {\n        window.removeEventListener('scroll', onScroll);\n      };\n    }\n  });\n\n  useEffect(() => {\n    setWebToonList([]);\n    setCountPage(1);\n    setFirstLoading(true);\n    setIsLoading(true);\n\n    axios\n      .get(\n        `toonder/webtoon/search?keyword=${encodeURIComponent(\n          searchContent\n        )}&page=${countPage}`\n      )\n      .then((res) => {\n        console.log(res.data);\n        if (res.data.length === 0) {\n          alert('검색어에 일치하는 웹툰이 없습니다.');\n          navigate(-1);\n        }\n        if (res.data.length > 0) {\n          setIsLoading(false);\n          setWebToonList(res.data);\n          setFirstLoading(false);\n        }\n      })\n      .catch((error) => {\n        console.log('Error:', error);\n        setIsLoading(false);\n        // 에러 처리를 원하는 대로 수행하세요.\n      });\n  }, [searchContent]);\n\n  const listCreator = () => {\n    var countForTrSplit = 1;\n    var trWebtoonList = [];\n    return (\n      <>\n        {firstLoading ? (\n          <div\n            style={{\n              fontSize: '30px',\n              color: 'white',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              height: '60px',\n            }}\n          >\n            <FaSpinner className=\"loadingIcon\" />\n          </div>\n        ) : (\n          <>\n            <table>\n              {webtoonList.map((webtoonInfo, index) => {\n                if (countForTrSplit === 1) {\n                  trWebtoonList = [];\n                }\n\n                trWebtoonList.push(webtoonInfo);\n                if (countForTrSplit === 4 || index === webtoonList.length - 1) {\n                  countForTrSplit = 1;\n                  return (\n                    <tr key={index}>\n                      {trWebtoonList.map((trWebtoonInfo, trIndex) => (\n                        <td key={trIndex}>\n                          <div className=\"webtoonContainer\">\n                            <button\n                              onClick={() => {\n                                navigate('/mainwebtooninfo', {\n                                  state: { mastrId: trWebtoonInfo.mastrId },\n                                });\n                              }}\n                            >\n                              <img\n                                src={trWebtoonInfo.imageDownloadUrl}\n                                alt=\"image error\"\n                              />\n                            </button>\n                            <div className=\"titleWrap\">\n                              <p className=\"webtoonTitle\">\n                                {trWebtoonInfo.title}\n                              </p>\n                            </div>\n                          </div>\n                        </td>\n                      ))}\n                    </tr>\n                  );\n                } else {\n                  countForTrSplit += 1;\n                }\n              })}\n            </table>\n            {isLoading && (\n              <div\n                style={{\n                  fontSize: '30px',\n                  color: 'white',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  height: '60px',\n                }}\n              >\n                <FaSpinner className=\"loadingIcon\" />\n              </div>\n            )}\n          </>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <>\n      <MainBackgorund>\n        <MainBackSmall>\n          <div className=\"mainWebtoonList\">{listCreator()}</div>\n\n          {showNavigationToScrollTop && (\n            <div\n              onClick={() => {\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n              }}\n              style={{\n                width: '50px',\n                height: '50px',\n                position: 'fixed',\n                bottom: '10%',\n                right: '5%',\n                opacity: '70%',\n              }}\n            >\n              <img\n                src={toTop}\n                alt=\"To Top\"\n                style={{ height: '100%', width: '100%' }}\n              />\n            </div>\n          )}\n        </MainBackSmall>\n      </MainBackgorund>\n    </>\n  );\n}\n\nexport default SearchWebtoonList;\n",{"ruleId":"203","severity":1,"message":"204","line":3,"column":17,"nodeType":"205","messageId":"206","endLine":3,"endColumn":26},{"ruleId":"203","severity":1,"message":"207","line":3,"column":28,"nodeType":"205","messageId":"206","endLine":3,"endColumn":36},{"ruleId":"203","severity":1,"message":"208","line":18,"column":8,"nodeType":"205","messageId":"206","endLine":18,"endColumn":13},{"ruleId":"203","severity":1,"message":"209","line":4,"column":8,"nodeType":"205","messageId":"206","endLine":4,"endColumn":14},{"ruleId":"203","severity":1,"message":"210","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":21},{"ruleId":"211","severity":1,"message":"212","line":108,"column":6,"nodeType":"213","endLine":108,"endColumn":8,"suggestions":"214"},{"ruleId":"203","severity":1,"message":"215","line":111,"column":19,"nodeType":"205","messageId":"206","endLine":111,"endColumn":24},{"ruleId":"216","severity":1,"message":"217","line":479,"column":15,"nodeType":"218","endLine":482,"endColumn":35},{"ruleId":"219","severity":1,"message":"220","line":496,"column":21,"nodeType":"218","messageId":"221","endLine":499,"endColumn":22,"fix":"222"},{"ruleId":"203","severity":1,"message":"223","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":23},{"ruleId":"211","severity":1,"message":"224","line":64,"column":6,"nodeType":"213","endLine":64,"endColumn":17,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":87,"column":46,"nodeType":"228","messageId":"229","endLine":87,"endColumn":48},{"ruleId":"216","severity":1,"message":"217","line":109,"column":35,"nodeType":"218","endLine":112,"endColumn":37},{"ruleId":"203","severity":1,"message":"230","line":2,"column":23,"nodeType":"205","messageId":"206","endLine":2,"endColumn":27},{"ruleId":"203","severity":1,"message":"231","line":50,"column":9,"nodeType":"205","messageId":"206","endLine":50,"endColumn":21},{"ruleId":"203","severity":1,"message":"232","line":56,"column":9,"nodeType":"205","messageId":"206","endLine":56,"endColumn":21},{"ruleId":"203","severity":1,"message":"233","line":62,"column":9,"nodeType":"205","messageId":"206","endLine":62,"endColumn":22},{"ruleId":"203","severity":1,"message":"234","line":66,"column":9,"nodeType":"205","messageId":"206","endLine":66,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":80,"column":7,"nodeType":"218","endLine":84,"endColumn":8},{"ruleId":"235","severity":1,"message":"237","line":115,"column":21,"nodeType":"218","endLine":121,"endColumn":22},{"ruleId":"203","severity":1,"message":"215","line":21,"column":21,"nodeType":"205","messageId":"206","endLine":21,"endColumn":26},{"ruleId":"211","severity":1,"message":"238","line":32,"column":6,"nodeType":"213","endLine":32,"endColumn":8,"suggestions":"239"},{"ruleId":"203","severity":1,"message":"240","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":21},{"ruleId":"203","severity":1,"message":"215","line":27,"column":21,"nodeType":"205","messageId":"206","endLine":27,"endColumn":26},{"ruleId":"211","severity":1,"message":"238","line":72,"column":6,"nodeType":"213","endLine":72,"endColumn":8,"suggestions":"241"},{"ruleId":"203","severity":1,"message":"215","line":78,"column":21,"nodeType":"205","messageId":"206","endLine":78,"endColumn":26},{"ruleId":"216","severity":1,"message":"217","line":167,"column":29,"nodeType":"218","endLine":175,"endColumn":31},{"ruleId":"235","severity":1,"message":"237","line":232,"column":25,"nodeType":"218","endLine":238,"endColumn":26},{"ruleId":"203","severity":1,"message":"223","line":1,"column":38,"nodeType":"205","messageId":"206","endLine":1,"endColumn":44},{"ruleId":"203","severity":1,"message":"242","line":207,"column":13,"nodeType":"205","messageId":"206","endLine":207,"endColumn":17},{"ruleId":"203","severity":1,"message":"243","line":37,"column":9,"nodeType":"205","messageId":"206","endLine":37,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":140,"column":13,"nodeType":"218","endLine":140,"endColumn":73},{"ruleId":"235","severity":1,"message":"237","line":198,"column":23,"nodeType":"218","endLine":212,"endColumn":24},{"ruleId":"235","severity":1,"message":"237","line":299,"column":23,"nodeType":"218","endLine":305,"endColumn":24},{"ruleId":"211","severity":1,"message":"244","line":435,"column":6,"nodeType":"213","endLine":435,"endColumn":8,"suggestions":"245"},{"ruleId":"216","severity":1,"message":"217","line":440,"column":9,"nodeType":"218","endLine":440,"endColumn":73},{"ruleId":"203","severity":1,"message":"243","line":22,"column":9,"nodeType":"205","messageId":"206","endLine":22,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":70,"column":11,"nodeType":"218","endLine":70,"endColumn":71},{"ruleId":"211","severity":1,"message":"244","line":192,"column":6,"nodeType":"213","endLine":192,"endColumn":8,"suggestions":"246"},{"ruleId":"216","severity":1,"message":"217","line":197,"column":9,"nodeType":"218","endLine":197,"endColumn":73},{"ruleId":"203","severity":1,"message":"209","line":2,"column":8,"nodeType":"205","messageId":"206","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"230","line":4,"column":10,"nodeType":"205","messageId":"206","endLine":4,"endColumn":14},{"ruleId":"216","severity":1,"message":"217","line":10,"column":9,"nodeType":"218","endLine":10,"endColumn":72},{"ruleId":"203","severity":1,"message":"247","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"204","line":1,"column":27,"nodeType":"205","messageId":"206","endLine":1,"endColumn":36},{"ruleId":"203","severity":1,"message":"240","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":21},{"ruleId":"203","severity":1,"message":"208","line":5,"column":8,"nodeType":"205","messageId":"206","endLine":5,"endColumn":13},{"ruleId":"216","severity":1,"message":"217","line":29,"column":13,"nodeType":"218","endLine":29,"endColumn":76},{"ruleId":"203","severity":1,"message":"230","line":4,"column":10,"nodeType":"205","messageId":"206","endLine":4,"endColumn":14},{"ruleId":"216","severity":1,"message":"217","line":21,"column":9,"nodeType":"218","endLine":21,"endColumn":72},{"ruleId":"203","severity":1,"message":"215","line":21,"column":21,"nodeType":"205","messageId":"206","endLine":21,"endColumn":26},{"ruleId":"211","severity":1,"message":"238","line":44,"column":6,"nodeType":"213","endLine":44,"endColumn":8,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":114,"column":13,"nodeType":"251","messageId":"252","endLine":114,"endColumn":21},{"ruleId":"203","severity":1,"message":"215","line":46,"column":21,"nodeType":"205","messageId":"206","endLine":46,"endColumn":26},{"ruleId":"211","severity":1,"message":"238","line":58,"column":6,"nodeType":"213","endLine":58,"endColumn":8,"suggestions":"253"},{"ruleId":"235","severity":1,"message":"237","line":299,"column":23,"nodeType":"218","endLine":301,"endColumn":24},{"ruleId":"235","severity":1,"message":"237","line":305,"column":23,"nodeType":"218","endLine":305,"endColumn":68},{"ruleId":"235","severity":1,"message":"237","line":365,"column":15,"nodeType":"218","endLine":372,"endColumn":16},{"ruleId":"203","severity":1,"message":"215","line":22,"column":21,"nodeType":"205","messageId":"206","endLine":22,"endColumn":26},{"ruleId":"211","severity":1,"message":"254","line":60,"column":6,"nodeType":"213","endLine":60,"endColumn":8,"suggestions":"255"},{"ruleId":"249","severity":1,"message":"250","line":134,"column":13,"nodeType":"251","messageId":"252","endLine":134,"endColumn":21},{"ruleId":"203","severity":1,"message":"223","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":23},{"ruleId":"211","severity":1,"message":"256","line":86,"column":6,"nodeType":"213","endLine":86,"endColumn":21,"suggestions":"257"},{"ruleId":"226","severity":1,"message":"227","line":109,"column":53,"nodeType":"228","messageId":"229","endLine":109,"endColumn":55},{"ruleId":"216","severity":1,"message":"217","line":129,"column":31,"nodeType":"218","endLine":132,"endColumn":33},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","'styles' is defined but never used.","'useNavigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mastrId'. Either include it or remove the dependency array.","ArrayExpression",["258"],"'error' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"259","text":"260"},"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'webtoonList'. Either include it or remove the dependency array. You can also do a functional update 'setWebToonList(w => ...)' if you only need 'webtoonList' in the 'setWebToonList' call.",["261"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Link' is defined but never used.","'goToPrevPage' is assigned a value but never used.","'goToNextPage' is assigned a value but never used.","'goToFirstPage' is assigned a value but never used.","'goToLastPage' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["262"],"'useLocation' is defined but never used.",["263"],"'data' is assigned a value but never used.","'closeModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setModalOpen'. Either include it or remove the dependency array. If 'setModalOpen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["264"],["265"],"'Auth' is defined but never used.",["266"],"no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected",["267"],"React Hook useEffect has missing dependencies: 'brdNo' and 'navigate'. Either include them or remove the dependency array.",["268"],"React Hook useEffect has missing dependencies: 'countPage' and 'navigate'. Either include them or remove the dependency array.",["269"],{"desc":"270","fix":"271"},[14292,14292]," rel=\"noreferrer\"",{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"274","fix":"276"},{"desc":"277","fix":"278"},{"desc":"277","fix":"279"},{"desc":"274","fix":"280"},{"desc":"274","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [mastrId]",{"range":"286","text":"287"},"Update the dependencies array to be: [countPage, webtoonList]",{"range":"288","text":"289"},"Update the dependencies array to be: [navigate]",{"range":"290","text":"291"},{"range":"292","text":"291"},"Update the dependencies array to be: [setModalOpen]",{"range":"293","text":"294"},{"range":"295","text":"294"},{"range":"296","text":"291"},{"range":"297","text":"291"},"Update the dependencies array to be: [brdNo, navigate]",{"range":"298","text":"299"},"Update the dependencies array to be: [countPage, navigate, searchContent]",{"range":"300","text":"301"},[3243,3245],"[mastrId]",[1941,1952],"[countPage, webtoonList]",[1180,1182],"[navigate]",[2295,2297],[13357,13359],"[setModalOpen]",[5018,5020],[1196,1198],[1682,1684],[1766,1768],"[brdNo, navigate]",[2442,2457],"[countPage, navigate, searchContent]"]