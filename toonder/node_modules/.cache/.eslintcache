[{"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/index.js":"1","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/App.js":"2","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid_after.js":"3","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid.js":"4","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonInfo.js":"5","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonList.js":"6","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/freeboard.js":"7","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/newpw.js":"8","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/login/login.js":"9","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findpw.js":"10","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/main_page.js":"11","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/infoChange.js":"12","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/join/join.js":"13","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mypage.js":"14","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackSmall.js":"15","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/ID_background.js":"16","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/supabase.js":"17","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackground.js":"18","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/backGround.js":"19","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/write.js":"20","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/postview.js":"21","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/search.js":"22"},{"size":185,"mtime":1685814123826,"results":"23","hashOfConfig":"24"},{"size":1891,"mtime":1686149616736,"results":"25","hashOfConfig":"24"},{"size":850,"mtime":1685814123816,"results":"26","hashOfConfig":"24"},{"size":956,"mtime":1685814123816,"results":"27","hashOfConfig":"24"},{"size":1806,"mtime":1686149616743,"results":"28","hashOfConfig":"24"},{"size":4905,"mtime":1686149616743,"results":"29","hashOfConfig":"24"},{"size":1988,"mtime":1686149616740,"results":"30","hashOfConfig":"24"},{"size":4108,"mtime":1686149616739,"results":"31","hashOfConfig":"24"},{"size":5305,"mtime":1686149616741,"results":"32","hashOfConfig":"24"},{"size":3066,"mtime":1686149616737,"results":"33","hashOfConfig":"24"},{"size":5671,"mtime":1686149616743,"results":"34","hashOfConfig":"24"},{"size":7854,"mtime":1686149616742,"results":"35","hashOfConfig":"24"},{"size":8687,"mtime":1686149616740,"results":"36","hashOfConfig":"24"},{"size":2721,"mtime":1686149616744,"results":"37","hashOfConfig":"24"},{"size":6223,"mtime":1686149616737,"results":"38","hashOfConfig":"24"},{"size":494,"mtime":1685814123816,"results":"39","hashOfConfig":"24"},{"size":486,"mtime":1685814123818,"results":"40","hashOfConfig":"24"},{"size":1575,"mtime":1686149616737,"results":"41","hashOfConfig":"24"},{"size":910,"mtime":1685814123816,"results":"42","hashOfConfig":"24"},{"size":590,"mtime":1686149616740,"results":"43","hashOfConfig":"24"},{"size":659,"mtime":1686149616740,"results":"44","hashOfConfig":"24"},{"size":5006,"mtime":1686149616744,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1l67g9a",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"107"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"49"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"49"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/index.js",[],[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/App.js",["132","133","134","135"],[],"import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Join from './component/join/join';\nimport React, { useEffect, useState } from 'react';\nimport Newpw from './component/find/newpw';\nimport Findid from './component/find/findid';\nimport Findpw from './component/find/findpw';\nimport Login from './component/login/login';\nimport Mainpage from './component/main/main_page';\nimport Findid_after from './component/find/findid_after';\nimport MainWebtoonList from './component/main/mainWebtoonList';\nimport MainBacksmall from './component/backgrounds/mainBackSmall';\nimport MainWebtoonInfo from './component/main/mainWebtoonInfo';\nimport Mypage from './component/main/mypage';\nimport Freeboard from './component/freeboard/freeboard';\nimport InfoC from './component/main/infoChange';\nimport Search from './component/main/search';\n\nimport axios from 'axios';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Login />} />\n          <Route path=\"/main_page\" element={<Mainpage />} />\n          <Route path=\"/findid\" element={<Findid />} />\n          <Route path=\"/findpw\" element={<Findpw />} />\n          <Route path=\"/findid_after\" element={<Findid_after />} />\n          <Route path=\"/mainWebtoonList\" element={<MainWebtoonList />} />\n          <Route path=\"/mainbackground\" element={<MainBacksmall />} />\n          <Route path=\"/mainwebtooninfo\" element={<MainWebtoonInfo />} />\n          <Route path=\"/freeboard\" element={<Freeboard />} />\n          <Route path=\"/mypage\" element={<Mypage />} />\n          <Route path=\"/infochange\" element={<InfoC />} />\n          <Route path=\"/newpw\" element={<Newpw />} />\n          <Route path=\"/join\" element={<Join />} />\n          <Route path=\"/search\" element={<Search />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid_after.js",["136"],[],"import React from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport IDBackground from '../backgrounds/ID_background';\nimport styles from '../../style.css';\n\n\nfunction Findid_after() {\n  const navigate = useNavigate();\n\n  return (\n    <IDBackground text=\"Find ID\">\n      <div className=\"findid_body\">\n        <h1>이거 보이면 됨 제발 ㅜㅜ</h1>\n        <div className=\"findIdAfterButtonset\">\n          <button\n            onClick={() => {\n              navigate('/findpw');\n            }}\n            id=\"find_pw_button\">\n              비밀번호 찾기\n          </button>\n\n          <button\n            onClick={() => {\n              navigate('/');\n            }}\n            id=\"loginButton\">\n              확인\n            </button>\n          </div>\n      </div>\n    </IDBackground>\n  );\n}\n\nexport default Findid_after;\n\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findid.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonInfo.js",["137","138","139"],[],"import React, {useEffect} from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport \"./mainPage.css\";\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport ex1 from \"../../images/ex1.png\"\nimport MainBackSmall from '../backgrounds/mainBackSmall';\n\n\nfunction MainWebtoonInfo() {\n  \n  const {state} = useLocation();\n  const {mastrId} = state;\n  useEffect( () => {\n    console.log(mastrId)\n  },[])\n\n  return (\n    <MainBackgorund>\n      <MainBackSmall>\n      <div className='mainWebtoonInfo'>\n        <div className='mainwtInfo'>\n          <img src={ex1} alt=\"image error\" />\n          <div className='subwtInfo'>\n            <h1>웹툰 정보</h1>\n            <ul>\n              <li>제목 : 유미의 세포들</li>\n              <li>글 / 그림 : 이동건</li>\n              <li>연재처 : 네이버 웹툰</li>\n            </ul>\n          </div>\n        </div>\n\n        <div className='mainStory'>\n            <h1>줄거리</h1>\n            <ul>\n              <li>유미는 지금 무슨 생각을 하고 있을까? 그녀의 머릿속에서 바쁘게 움직이는 세포들 이야기!</li>\n            </ul>\n        </div>\n      </div>\n      <div className='mainReview'>\n        <h1>리뷰</h1>\n        <section>\n          <ul>\n            <li>사람의 감정과 이성의 중도를 너무 간결하게 이해시켜주는 작품인 거 같습니다!” - Hanna Lee</li>\n            <li>네이버 웹툰 중에서 제일 재밌음! - Stephan Lee</li>\n            <li>설레는 포인트도 많고, 정주행 10번은 해야지~ - Howard Wolowitz</li>\n          </ul>\n        </section>\n        <input type=\"text\" placeholder='    리뷰를 달아보세요!'></input>\n      </div>\n      </MainBackSmall>\n\n    </MainBackgorund>\n  );\n}\n\nexport default MainWebtoonInfo;","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mainWebtoonList.js",["140","141","142","143","144","145","146","147","148","149","150","151"],[],"import React , {useRef, useEffect, useState} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport \"./mainPage.css\";\nimport axios from 'axios';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport ex1 from \"../../images/ex1.png\"\nimport ex2 from \"../../images/ex2.png\"\nimport ex3 from \"../../images/ex3.png\"\nimport ex4 from \"../../images/ex4.png\"\nimport ex5 from \"../../images/ex5.png\"\nimport ex6 from \"../../images/ex6.png\"\nimport ex7 from \"../../images/ex7.png\"\nimport ex8 from \"../../images/ex8.png\"\nimport toTop from \"../../images/toTop.png\"\nimport MainBackSmall from '../backgrounds/mainBackSmall';\nimport { FaSpinner } from 'react-icons/fa'; // 로딩 아이콘 추가\n\nfunction MainWebtoonList() {\n  const [webtoonList, setWebToonList] = useState([])\n  const [countPage, setCountPage] = useState(1)\n  const [firstLoading, setFirstLoading] = useState(true)\n  const [isLoading, setIsLoading] = useState(true);\n  const [showNavigationToScrollTop, setShowNavigationToScrollTop] = useState(false)\n\n  const navigate = useNavigate();\n\n  function onScroll() {\n    const windowHeight =\n        window.innerHeight || document.documentElement.clientHeight;\n      const documentHeight = document.documentElement.scrollHeight;\n      const scrolledToBottom =\n        Math.ceil(window.scrollY + windowHeight) >= documentHeight;\n\n        //console.log(window.scrollY)\n      if (window.scrollY === 0) {\n        setShowNavigationToScrollTop(false)\n      }\n      else {\n        setShowNavigationToScrollTop(true)\n      }\n\n      if (scrolledToBottom) {\n        setIsLoading(true)\n        setCountPage(countPage+1)\n      }\n  }\n\n  useEffect(()=> {\n    //console.log(showNavigationToScrollTop)\n    if (!isLoading){\n      window.addEventListener(\"scroll\", onScroll)\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll)\n    };\n    }\n\n\n  })\n\n  useEffect(() => {\n    axios\n      .get('toonder/webtoon?p_num='+countPage)\n      .then(res => {\n        if (webtoonList.length === 0){\n          setIsLoading(false)\n          setWebToonList(res.data)\n          setFirstLoading(false)\n        }\n        else{\n          setIsLoading(false)\n          setWebToonList(webtoonList.concat(res.data))\n          console.log(countPage);\n        }\n\n      })\n  },[countPage])\n\n  const listCreator = () => {\n    var countForTrSplit = 1;\n    var trWebtoonList = [];\n    return(\n      <>\n      {firstLoading ? (\n         <div id='firstLoading'>\n         <FaSpinner className=\"loadingIcon\" />\n       </div>\n      ) : (\n        <>\n        <table>\n          {\n            webtoonList.map(\n              (webtoonInfo) => {\n                if (countForTrSplit === 1) {\n                  trWebtoonList = []\n                }\n\n                trWebtoonList.push(webtoonInfo)\n                if (countForTrSplit === 4){\n                  countForTrSplit = 1;\n                  return (\n                    <tr>\n\n                      <tr>\n                      {\n                        trWebtoonList.map(trWebtoonInfo => (\n                          <td>\n                            <tr>\n                              <td>\n                                <button onClick={() => {navigate('/mainwebtooninfo', {state : {mastrId : trWebtoonInfo.mastrId}});}}>\n                                  <img src={trWebtoonInfo.imageDownloadUrl} alt=\"image error\" />\n                                </button>\n                              </td>\n                            </tr>\n                            <tr style={{height:'65px'}}>\n                              <td style={{height:'75px'}}>\n                              <p className=\"webtoonTitle\">\n                                {trWebtoonInfo.title}\n                              </p>\n                              </td>\n                            </tr>\n                          </td>\n                        ))\n                      }\n                      </tr>\n                    </tr>\n\n                  )\n                }\n                else {\n                  countForTrSplit += 1;\n                }\n              }\n              )\n          }\n\n      </table>\n      {isLoading ? ( // 로딩 중일 때의 화면\n            <div id='isLoading'>\n              <FaSpinner className=\"loadingIcon\" />\n            </div>\n          ) : (\n            <div></div>\n          )\n          }\n        </>\n      )\n      }\n      </>\n    );\n  }\n\n  return (\n    <>\n    <MainBackgorund>\n        <MainBackSmall>\n        <div className='mainWebtoonList'>\n            {listCreator()}\n        </div>\n\n        {showNavigationToScrollTop ? (\n          <div id='showNavigationToScrollTop'\n          onClick={() => {window.scrollTo({ top: 0, behavior: 'smooth' })}}>\n            <img src={toTop} alt=\"To Top\" style={{height:'100%', wigth:'100%'}}/>\n        </div>):\n        null}\n\n\n      </MainBackSmall>\n\n    </MainBackgorund>\n    </>\n  );\n}\n\n\nexport default MainWebtoonList;","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/freeboard.js",["152","153","154","155","156","157","158","159","160","161","162"],[],"import React,{useState, useEffect} from 'react';\nimport { useNavigate , Link} from 'react-router-dom';\nimport \"./freeboard.css\";\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\n\n\nfunction Freeboard() {\n  const navigate = useNavigate();\n  const [loggedUserName, setLoggedUserName] = useState('지금 로그인하세요!');\n  useEffect(() => {\n    axios\n      .get('api/member/select/'+sessionStorage.getItem('loggedUserEmail'))\n      .then(loggedUserData => {\n        setLoggedUserName(loggedUserData.data.mem_name);\n      })\n      .catch(error => console.log(error))\n  },[])\n  return (\n    <MainBackgorund>\n        <div className='mainboard'>\n            <h2>자유게시판</h2>\n            <ul>\n              <li>\n                <Link to='/postview'>1234</Link>\n              </li>\n              <li>\n                <Link to='/postview'>1234</Link>\n              </li>\n              <li>\n                <Link to='/postview'>1234</Link>\n              </li>\n              <li>\n                <Link to='/postview'>1234</Link>\n              </li>\n              <li>\n                <Link to='/postview'>1234</Link>\n              </li>\n              <li>\n                <Link to='/postview'>1234</Link>\n              </li>\n            </ul>\n        </div>\n        <div className='subbuttons'>\n            <div class=\"pagination\">\n                <a href=\"#\">&lt;&lt;</a>\n                <a href=\"#\">&lt;</a>\n                <a class=\"active\" href=\"#\">1</a>\n                <a href=\"#\">2</a>\n                <a href=\"#\">3</a>\n                <a href=\"#\">4</a>\n                <a href=\"#\">5</a>\n                <a href=\"#\">6</a>\n                <a href=\"#\">&gt;</a>\n                <a href=\"#\">&gt;&gt;</a>\n            </div>\n            <button id=\"freewrite\"\n              onClick={() => {\n                navigate('/write');\n              }}\n              >글쓰기</button>\n        </div>\n    </MainBackgorund>\n  );\n}\n\nexport default Freeboard;","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/newpw.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/login/login.js",["163","164"],[],"import React, { useState, useEffect } from 'react';\nimport styles from './login.module.css'; //CSS Module 이라는 기술을 사용하면, CSS 클래스가 중첩되는 것을 완벽히 방지할 수 있음\nimport IDBackground from '../backgrounds/ID_background';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../supabase';\n\nfunction Login() {\n  useEffect(() => {\n    document.title = 'Toonder 로그인';\n  }, []);\n  const [email, setEmail] = useState(''); //이메일 값\n  const [password, setPw] = useState(''); //비밀번호 값\n  const [emailValid, setEmailValid] = useState(false); //이메일 유효성\n  const [pwValid, setPwValid] = useState(false); //비밀번호 유효성\n  const [notAllow, setNotAllow] = useState(true); //로그인 (submit)버튼 활성화 여부\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // 이미 로그인된 상태인지 확인\n    const checkLoggedIn = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session !== null) {\n        // 이미 로그인된 상태라면 로그아웃하고 메인 페이지로 이동\n        alert('이미 로그인되어 있습니다.');\n        navigate('/main_page'); // 메인 페이지로 이동\n      }\n    };\n\n    checkLoggedIn();\n  }, []);\n\n  const onClickConfirm = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email: email,\n        password: password,\n      });\n\n      if (error) {\n        alert('로그인에 실패했습니다.');\n        console.log(error);\n      } else if (data) {\n        alert('로그인 되었습니다.');\n\n        sessionStorage.setItem('loggedUserEmail', email); // 로그인 하면 sessionStorage에 email이 저장됨\n        navigate('/main_page'); // 로그인 성공 시 대시보드 페이지로 이동\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    //이메일 유효성과 비밀번호 유효성이 바꼈을때 둘다 유효한 경우만 login버튼 활성화 해주는 기능\n    if (emailValid && pwValid) setNotAllow(false);\n    else setNotAllow(true);\n    return;\n  }, [emailValid, pwValid]);\n\n  const handleEmail = (e) => {\n    //이메일 값을 value에 state\n    setEmail(e.target.value);\n    const regex = //이메일 유효성검사 하기위한 객체\n      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n    if (regex.test(e.target.value)) {\n      setEmailValid(true);\n    } else {\n      setEmailValid(false);\n    }\n  };\n\n  const handlePW = (e) => {\n    //위와 마찬가지 비밀번호인 경우\n    setPw(e.target.value);\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setPwValid(true);\n    } else {\n      setPwValid(false);\n    }\n  };\n\n  return (\n    //클래스를 설정할땐 styles객체안에 있는 값을 참조하는 방식\n    <div>\n      <IDBackground text=\"Login\">\n        {loading ? (\n          <div className={styles.Loading}>로그인 중 입니다...</div>\n        ) : (\n          <form>\n            <div className={styles.Login}>\n              <div>\n                {!emailValid &&\n                  email.length > 0 && ( //이메일이 유효하지 않고 이메일을 입력하기 시작하면 에러 메세지가 뜸\n                    <div>올바른 이메일을 입력해주세요</div>\n                  )}\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={email}\n                  onChange={handleEmail}\n                  placeholder=\"Enter your e-mail\"\n                />\n              </div>\n              <div>\n                {!pwValid && password.length > 0 && (\n                  <div>영문, 숫자 포함 8~10자 입력해주세요</div> //비밀번호가 유효하지 않고 비밀번호를 입력하기 시작하면 에러 메세지가 뜸\n                )}\n              </div>\n              <div>\n                <input\n                  type=\"password\"\n                  value={password}\n                  onChange={handlePW}\n                  placeholder=\"Enter your password\"\n                />\n              </div>\n              <button\n                onClick={onClickConfirm}\n                disabled={notAllow}\n                type=\"submit\"\n              >\n                <strong>Login</strong>\n              </button>\n            </div>\n          </form>\n        )}\n      </IDBackground>\n      <div className={styles.FindnSign}>\n        <button\n          onClick={() => {\n            navigate('/findid');\n          }}\n          id=\"find_id_button\"\n        >\n          아이디 찾기\n        </button>\n        &nbsp;&nbsp;\n        <button\n          onClick={() => {\n            navigate('/findpw');\n          }}\n          id=\"find_pw_button\"\n        >\n          비밀번호 찾기\n        </button>\n        &nbsp;&nbsp;\n        <button\n          onClick={() => {\n            navigate('/join');\n          }}\n          id=\"join\"\n        >\n          회원가입\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/find/findpw.js",[],[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/main_page.js",["165","166","167","168"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mainPage.css';\nimport '../backgrounds/backGround.module.css';\n\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport MainBackSmall from '../backgrounds/mainBackSmall';\nimport supabase from '../supabase';\nimport { useLocation } from 'react-router';\nimport axios from 'axios';\nimport logo from '../../images/logo2.png';\nimport { FaSpinner } from 'react-icons/fa'; // 로딩 아이콘 추가\n\nfunction Mainpage(props) {\n  const navigate = useNavigate();\n  const [resdata, setResData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session === null) {\n        alert('로그인을 먼저 해주세요.');\n        navigate('/');\n      } else {\n        const email = session.user.email;\n        const requestData = {\n          email: email,\n        };\n\n        axios\n          .post('toonder/recommand', requestData)\n          .then((res) => {\n            console.log(res.data);\n            setResData(res.data);\n            setIsLoading(false); // 데이터 가져오기 완료 후 로딩 상태 변경\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleRecommendation = () => {\n    setIsLoading(true); // 새로운 추천 웹툰 이미지를 가져오기 전에 로딩 상태를 true로 설정\n\n    const fetchData = async () => {\n      const email = sessionStorage.getItem('loggedUserEmail');\n      const requestData = {\n        email: email,\n      };\n\n      axios\n        .post('toonder/recommand', requestData)\n        .then((res) => {\n          console.log(res.data);\n          setResData(res.data);\n          setIsLoading(false); // 데이터 가져오기 완료 후 로딩 상태 변경\n        })\n        .catch((error) => console.log(error));\n    };\n\n    fetchData();\n  };\n\n  return (\n    <MainBackgorund>\n      <div style={{ position: 'relative' }}>\n        <h2\n          style={{\n            position: 'absolute',\n            color: 'white',\n            display: 'flex',\n            zIndex: 1,\n            top: '90px',\n            left: '300px',\n          }}\n        >\n          추천 웹툰 목록\n        </h2>\n      </div>{' '}\n      <MainBackSmall>\n        <div className=\"mainPage\">\n          <div style={{ position: 'absolute' }}>\n            <button\n              onClick={handleRecommendation}\n              style={{\n                position: 'absolute',\n                color: 'rgb(255, 147, 147)',\n                display: 'flex',\n                zIndex: 1,\n                backgroundColor: 'white',\n                width: '150px',\n                height: '25px',\n                justifyContent: 'center', // 가로 가운데 정렬\n                alignItems: 'center',\n                fontSize: '22px',\n                top: '-235px',\n                left: '765px',\n                borderRadius: '10px',\n              }}\n            >\n              추천 새로 받기\n            </button>\n          </div>\n          {isLoading ? ( // 로딩 중일 때의 화면\n            <div\n              style={{\n                fontSize: '100px',\n                color: 'white',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '100vh',\n              }}\n            >\n              <FaSpinner className=\"loadingIcon\" />\n            </div>\n          ) : (\n            <main>\n              <div className=\"recommendationButtonWrapper\"></div>\n              <table>\n                <tbody>\n                  <tr>\n                    {resdata.map((item, index) => (\n                      <td key={index}>\n                        <button\n                          className=\"refresh\"\n                          onClick={() => {\n                            navigate('/mainwebtooninfo', {state : {mastrId : item.mastrId}});\n                          }}\n                        >\n                          <div className=\"imageContainer\">\n                            <img\n                              className=\"webtoonImage\"\n                              src={item.imageDownloadUrl}\n                              alt=\"image error\"\n                              onError={(e) => {\n                                e.target.onerror = null;\n                                e.target.src = logo;\n                              }}\n                            />\n                          </div>\n                          <br />\n\n                          <p\n                            className=\"webtoonTitle\"\n                            style={{ fontSize: '18px', color: 'white' }}\n                          >\n                            {item.title}\n                          </p>\n                        </button>\n                      </td>\n                    ))}\n                  </tr>\n                </tbody>\n              </table>\n            </main>\n          )}<div className=\"botPage\" style={{ marginbottom: '200px' }}>\n  <section>\n    <ul>\n      <li>사람의 감정과 이성의 중도를 너무 간결하게 이해시켜주는 작품인 거 같습니다!” - Hanna Lee</li>\n      <li>네이버 웹툰 중에서 제일 재밌음! - Stephan Lee</li>\n      <li>설레는 포인트도 많고, 정주행 10번은 해야지~ - Howard Wolowitz</li>\n    </ul>\n  </section>\n</div>\n\n        </div>\n        {props.children}\n      </MainBackSmall>\n    </MainBackgorund>\n  );\n}\n\nexport default Mainpage;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/infoChange.js",["169"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport Background from '../backgrounds/backGround';\nimport supabase from '../supabase';\nimport styles from './infoChange.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nfunction InfoC() {\n  useEffect(() => {\n    document.title = 'Toonder 정보변경';\n  }, []); //페이지 타이틀\n\n  const [firstName, setFirstName] = useState(''); //이름 값\n  const [lastName, setLastName] = useState(''); //성씨 값\n  const [pw, setPw] = useState(''); //비밀번호 값\n  const [pwc, setPwc] = useState(''); //비밀번호 확인 값\n  const [isPwCheck, setIsPwCheck] = useState(false); //비밀번호 확인 여부\n  const [isPwValid, setIsPwValid] = useState(false); //비밀번호 유효성 여부\n  const navigate = useNavigate();\n  const [notAllow, setNotAllow] = useState(true); //회원가입 버튼 활성화 여부\n  const [selectedHashtags, setSelectedHashtags] = useState('');\n\n  useEffect(() => {\n    const storedHashtags = localStorage.getItem('loggedUserHashTag');\n    if (storedHashtags) {\n      const tags = storedHashtags.split(' ').map((tag) => tag.replace('#', ''));\n      setSelectedHashtags(tags);\n    }\n  }, []); //사용자 해시태그 정보 가져옴\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const hashtag = '#' + selectedHashtags.join(' #');\n    const email = sessionStorage.getItem('loggedUserEmail');\n\n    try {\n      await supabase.auth.updateUser({ password: pw });\n\n      axios\n        .post('toonder/update', {\n          mem_email: email,\n          mem_name: lastName + firstName,\n          mem_hashtag: hashtag,\n        })\n        .then(() => {\n          localStorage.removeItem('loggedUserName');\n          localStorage.removeItem('loggedUserHashTag');\n          alert('회원정보가 변경되었습니다.');\n          navigate(-1);\n        })\n        .catch(() => {\n          console.log(\n            'Error for sending user data to Spring - creating member'\n          );\n          alert('회원정보 변경 중에 오류가 발생했습니다.');\n        });\n    } catch (error) {\n      console.error(error);\n      alert('회원정보 변경 중에 오류가 발생했습니다.');\n    }\n  };\n\n  useEffect(() => {\n    if (\n      isPwCheck &&\n      isPwValid &&\n      firstName.length > 0 &&\n      lastName.length > 0 &&\n      selectedHashtags.length > 0\n    )\n      setNotAllow(false);\n    else setNotAllow(true);\n\n    return;\n  }, [isPwValid, isPwCheck, firstName, lastName, selectedHashtags]);\n\n  const handleFirstName = (e) => {\n    setFirstName(e.target.value);\n  };\n\n  const handleLastName = (e) => {\n    setLastName(e.target.value);\n  };\n\n  const handlePW = (e) => {\n    setPw(e.target.value);\n\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setIsPwValid(true);\n    } else {\n      setIsPwValid(false);\n    }\n\n    if (e.target.value === pwc) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleCheckPw = (e) => {\n    setPwc(e.target.value);\n    if (pw === e.target.value) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleCheckboxChange = (event) => {\n    const { value, checked } = event.target;\n    if (checked) {\n      setSelectedHashtags((prevSelectedHashtags) => [\n        ...prevSelectedHashtags,\n        value,\n      ]);\n    } else {\n      setSelectedHashtags((prevSelectedHashtags) =>\n        prevSelectedHashtags.filter((hashtag) => hashtag !== value)\n      );\n    }\n  };\n\n  const hashtagOptions = [\n    '공포',\n    '드라마',\n    '코믹',\n    '일상',\n    '판타지',\n    '액션',\n    '역사',\n    '학원',\n    'SF',\n    '학습만화',\n    '캠페인',\n    '스포츠',\n    '동성애',\n    '추리',\n    '모험',\n    '무협',\n    '시사',\n    '교양',\n    '요리',\n    '성인',\n    '순정',\n    'BL',\n    '소년',\n    '미스터리',\n    'GL',\n    '로맨스판타지',\n    '카툰',\n    '기관발행물',\n    '만화이론',\n    '로맨스',\n    '그래픽노블',\n    '개그',\n  ];\n\n  return (\n    <Background text=\"Info Change\" backgroundSize=\"600px 500px\">\n      <form onSubmit={handleSubmit}>\n        <div className={styles.name}>\n          <input\n            type=\"text\"\n            onChange={handleFirstName}\n            id=\"firstName\"\n            placeholder=\"이름\"\n            autoComplete=\"off\"\n          />\n          <input\n            type=\"text\"\n            onChange={handleLastName}\n            id=\"lastName\"\n            placeholder=\"성\"\n            autoComplete=\"off\"\n          />\n        </div>\n\n        <div className={styles.password}>\n          {!isPwValid && pw.length > 0 && (\n            <div\n              style={{\n                position: 'absolute',\n                top: '-20px',\n                color: 'white',\n                fontSize: '15px',\n              }}\n            >\n              영문, 숫자 포함 8~10자 이상 입력해주세요\n            </div>\n          )}\n          <input\n            type=\"password\"\n            onChange={handlePW}\n            value={pw}\n            placeholder=\"비밀번호\"\n            autoComplete=\"off\"\n          />\n          {!isPwCheck && pw.length > 0 && (\n            <div\n              style={{\n                position: 'absolute',\n                top: '-20px',\n                color: 'white',\n                fontSize: '15px',\n                left: '270px',\n                fontWeight: 'normal',\n              }}\n            >\n              비밀번호를 한번 더 정확히 입력해주세요\n            </div>\n          )}\n          <input\n            type=\"password\"\n            onChange={handleCheckPw}\n            value={pwc}\n            placeholder=\"비밀번호 확인\"\n            autoComplete=\"off\"\n          />\n        </div>\n\n        {!selectedHashtags.length > 0 && (\n          <div\n            style={{\n              position: 'absolute',\n            }}\n          >\n            <div\n              style={{\n                position: 'relative',\n                color: 'white',\n                fontSize: '15px',\n                left: '70%',\n                top: '-50px',\n              }}\n            >\n              좋아하는 만화 장르를 1개 이상 선택\n            </div>\n          </div>\n        )}\n\n        <CheckboxContainer>\n          {hashtagOptions.map((hashtag) => (\n            <CheckboxLabel key={hashtag}>\n              <CheckboxInput\n                type=\"checkbox\"\n                value={hashtag}\n                onChange={handleCheckboxChange}\n                checked={selectedHashtags.includes(hashtag)}\n              />\n              {hashtag}\n            </CheckboxLabel>\n          ))}\n        </CheckboxContainer>\n        <div>\n          <button className={styles.submit} disabled={notAllow} type=\"submit\">\n            <strong>Info Change</strong>\n          </button>\n        </div>\n      </form>\n    </Background>\n  );\n}\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 200px;\n  overflow-y: auto;\n  border: 1px solid #ccc;\n  padding: 10px;\n  width: 470px;\n  transform: translateX(5%);\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: 391px;\n  border-radius: 10px;\n  background-color: white;\n  color: grey;\n\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  width: 50%;\n  margin-bottom: 5px;\n`;\n\nconst CheckboxInput = styled.input`\n  margin-right: 15px;\n  margin-left: 65px;\n`;\n\nexport default InfoC;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/join/join.js",["170"],[],"import React, { useState, useEffect } from 'react';\nimport Background from '../backgrounds/backGround';\nimport supabase from '../supabase';\nimport styles from './join.module.css';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst CheckboxContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 160px;\n  overflow-y: auto;\n  border: 1px solid #ccc;\n  padding: 10px;\n  width: 470px;\n  transform: translateX(5%);\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  top: 455px;\n  border-radius: 10px;\n  background-color: white;\n  color: grey;\n\n  /* 스크롤 스타일 적용 */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`;\n\nconst CheckboxLabel = styled.label`\n  display: flex;\n  align-items: center;\n  width: 50%;\n  margin-bottom: 5px;\n`;\n\nconst CheckboxInput = styled.input`\n  margin-right: 15px;\n  margin-left: 65px;\n`;\n\nfunction Join() {\n  useEffect(() => {\n    document.title = 'Toonder 회원가입';\n  }, []);\n  const [pw, setPw] = useState(''); //비밀번호 값\n  const [pwc, setPwc] = useState(''); //비밀번호 확인 값\n  const [isPwCheck, setIsPwCheck] = useState(false); //비밀번호 확인 여부\n  const [isPwValid, setIsPwValid] = useState(false); //비밀번호 유효성 여부\n  const [firstName, setFirstName] = useState(''); //이름 값\n  const [lastName, setLastName] = useState(''); //성씨 값\n  const [email, setEmail] = useState(''); //이메일 값\n  const [notAllow, setNotAllow] = useState(true); //회원가입 버튼 활성화 여부\n  const [isValidEmail, setEmailValid] = useState(false); //이메일 유효성 여부\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [selectedHashtags, setSelectedHashtags] = useState([]);\n\n  const handleCheckboxChange = (event) => {\n    const { value, checked } = event.target;\n    if (checked) {\n      setSelectedHashtags((prevSelectedHashtags) => [\n        ...prevSelectedHashtags,\n        value,\n      ]);\n    } else {\n      setSelectedHashtags((prevSelectedHashtags) =>\n        prevSelectedHashtags.filter((hashtag) => hashtag !== value)\n      );\n    }\n  };\n\n  const hashtagOptions = [\n    '공포',\n    '드라마',\n    '코믹',\n    '일상',\n    '판타지',\n    '액션',\n    '역사',\n    '학원',\n    'SF',\n    '학습만화',\n    '캠페인',\n    '스포츠',\n    '동성애',\n    '추리',\n    '모험',\n    '무협',\n    '시사',\n    '교양',\n    '요리',\n    '성인',\n    '순정',\n    'BL',\n    '소년',\n    '미스터리',\n    'GL',\n    '로맨스판타지',\n    '카툰',\n    '기관발행물',\n    '만화이론',\n    '로맨스',\n    '그래픽노블',\n    '개그',\n  ];\n\n  useEffect(() => {\n    if (\n      isValidEmail &&\n      isPwCheck &&\n      isPwValid &&\n      firstName.length > 0 &&\n      lastName.length > 0 &&\n      selectedHashtags.length > 0\n    )\n      setNotAllow(false);\n    else setNotAllow(true);\n    return;\n  }, [\n    isValidEmail,\n    isPwValid,\n    isPwCheck,\n    firstName,\n    lastName,\n    selectedHashtags,\n  ]);\n\n  const handleFirstName = (e) => {\n    setFirstName(e.target.value);\n  };\n\n  const handleLastName = (e) => {\n    setLastName(e.target.value);\n  };\n\n  const handlePW = (e) => {\n    setPw(e.target.value);\n\n    const regex = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{8,10}$/;\n    if (regex.test(e.target.value)) {\n      setIsPwValid(true);\n    } else {\n      setIsPwValid(false);\n    }\n\n    if (e.target.value === pwc) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleEmail = (e) => {\n    setEmail(e.target.value);\n    const regex =\n      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n    if (regex.test(e.target.value)) {\n      setEmailValid(true);\n    } else {\n      setEmailValid(false);\n    }\n  };\n\n  const handleCheckPw = (e) => {\n    setPwc(e.target.value);\n\n    if (pw === e.target.value) {\n      setIsPwCheck(true);\n    } else {\n      setIsPwCheck(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    //////////////체크박스로 입력받은 해시태그는 공백으로 단어가 분리된 문자열로 저장을 해서 데이터로 보냄\n    setLoading(true);\n    const hashtag = '#' + selectedHashtags.join(' #');\n    axios\n      .post('toonder/join', {\n        mem_email: email,\n        mem_name: lastName + firstName,\n        mem_hashtag: hashtag,\n      })\n      .catch(function () {\n        console.log('Error for sending user data to Spring - creating member');\n      });\n\n    e.preventDefault();\n\n    const { data, error } = await supabase.auth.signUp({\n      email: email,\n      password: pw,\n    });\n\n    if (error) {\n      alert(error);\n      setLoading(false);\n    } else alert('인증 메일을 발송했습니다. 이메일 확인 후 로그인해주세요.');\n    navigate('/');\n  };\n\n  return (\n    <Background text=\"Join\" backgroundSize=\"600px 500px\">\n      {loading ? (\n        <div className={styles.Loading}>잠시만 기다려주세요...</div>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <div className={styles.name}>\n            <input\n              type=\"text\"\n              onChange={handleFirstName}\n              id=\"firstName\"\n              placeholder=\"이름\"\n            />\n            <input\n              type=\"text\"\n              onChange={handleLastName}\n              id=\"lastName\"\n              placeholder=\"성\"\n            />\n          </div>\n          <div className={styles.email}>\n            {!isValidEmail && email.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                }}\n              >\n                올바른 이메일을 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={handleEmail}\n              placeholder=\"이메일 입력\"\n            />\n          </div>\n          <div className={styles.password}>\n            {!isPwValid && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                }}\n              >\n                영문, 숫자 포함 8~10자 이상 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handlePW}\n              value={pw}\n              placeholder=\"비밀번호\"\n            />\n            {!isPwCheck && pw.length > 0 && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: '-20px',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '270px',\n                  fontWeight: 'normal',\n                }}\n              >\n                비밀번호를 한번 더 정확히 입력해주세요\n              </div>\n            )}\n            <input\n              type=\"password\"\n              onChange={handleCheckPw}\n              value={pwc}\n              placeholder=\"비밀번호 확인\"\n            />\n          </div>\n          {!selectedHashtags.length > 0 && (\n            <div\n              style={{\n                position: 'absolute',\n              }}\n            >\n              <div\n                style={{\n                  position: 'relative',\n                  color: 'white',\n                  fontSize: '15px',\n                  left: '70%',\n                  top: '-10px',\n                }}\n              >\n                좋아하는 만화 장르를 1개 이상 선택\n              </div>\n            </div>\n          )}\n\n          <CheckboxContainer>\n            {hashtagOptions.map((hashtag) => (\n              <CheckboxLabel key={hashtag}>\n                <CheckboxInput\n                  type=\"checkbox\"\n                  value={hashtag}\n                  onChange={handleCheckboxChange}\n                />\n                {hashtag}\n              </CheckboxLabel>\n            ))}\n          </CheckboxContainer>\n          <div>\n            <button className={styles.submit} disabled={notAllow} type=\"submit\">\n              <strong>Join</strong>\n            </button>\n          </div>\n        </form>\n      )}\n    </Background>\n  );\n}\nexport default Join;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/mypage.js",["171"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './mainPage.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\nimport supabase from '../supabase';\n\nfunction Mypage() {\n  const navigate = useNavigate();\n  const [loggedUserName, setLoggedUserName] = useState(\n    localStorage.getItem('loggedUserName')\n  );\n  const [loggedUserHashTag, setLoggedUserHashTag] = useState(\n    localStorage.getItem('loggedUserHashTag')\n  );\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await supabase.auth.getSession();\n      const email = data.session.user.email;\n      const requestData = {\n        email: email,\n      };\n\n      axios\n        .post('toonder/mypage', requestData)\n        .then((hashData) => {\n          console.log(hashData.data.mem_hashtag);\n          setLoggedUserHashTag(hashData.data.mem_hashtag);\n          localStorage.setItem('loggedUserHashTag', hashData.data.mem_hashtag);\n        })\n        .catch((error) => console.log(error));\n\n      if (!localStorage.getItem('loggedUserName')) {\n        axios\n          .post('toonder/name', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_name);\n            setLoggedUserName(loggedUserData.data.mem_name);\n            localStorage.setItem(\n              'loggedUserName',\n              loggedUserData.data.mem_name\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <MainBackgorund>\n      <div className=\"mainUserInfo\">\n        <div className=\"mainInfo\">\n          <img></img>\n          <h2>{loggedUserName}</h2>\n          <button\n            id=\"changeInfo\"\n            onClick={() => {\n              navigate('/infochange');\n            }}\n          >\n            <h3>정보수정</h3>\n          </button>\n        </div>\n\n        <h1>{loggedUserHashTag}</h1>\n      </div>\n\n      <div className=\"subUserInfo\">\n        <div className=\"myReview\">\n          <h2>나의 리뷰</h2>\n          <section>\n            <h4>유미의 세포들</h4>\n            <ul>\n              <li>\n                사람의 감정과 이성의 중도를 너무 간결하게 이해시켜주는 작품인 거\n                같습니다!\n              </li>\n            </ul>\n          </section>\n        </div>\n        <div className=\"myPost\">\n          <h2>나의 자유게시판 글</h2>\n          <section>\n            <ul>\n              <li>원주민 공포만화 관련 정보 올려주세요!</li>\n            </ul>\n          </section>\n        </div>\n      </div>\n    </MainBackgorund>\n  );\n}\n\nexport default Mypage;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackSmall.js",["172","173","174","175"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './backGround.module.css';\nimport ex1 from '../../images/ex1.png';\nimport axios from 'axios';\nimport supabase from '../supabase';\n\nfunction MainBackSmall(props) {\n  const navigate = useNavigate();\n  const [loggedUserName, setLoggedUserName] = useState(\n    localStorage.getItem('loggedUserName')\n  );\n  const [loggedUserImage, setLoggedUserImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const openModal = () => {\n    setModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data } = await supabase.auth.getSession();\n      const email = data.session.user.email;\n      const requestData = {\n        email: email,\n      };\n\n      if (!localStorage.getItem('loggedUserName')) {\n        axios\n          .post('toonder/name', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_name);\n            setLoggedUserName(loggedUserData.data.mem_name);\n            localStorage.setItem(\n              'loggedUserName',\n              loggedUserData.data.mem_name\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n\n      if (!localStorage.getItem('loggedUserPhoto')) {\n        axios\n          .post('toonder/photo', requestData)\n          .then((loggedUserData) => {\n            console.log(loggedUserData.data.mem_photo);\n            setLoggedUserImage(loggedUserData.data.mem_photo);\n            localStorage.setItem(\n              'loggedUserPhoto',\n              loggedUserData.data.mem_photo\n            );\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"mainBackSmall\"  setSearchTitle={props.setSearchTitle} handleSearch={props.handleSearch}>\n      <div className=\"mainInfo\">\n        <div onClick={openModal}>\n          <img id=\"infoimg\" src={loggedUserImage} alt=\"image error\" />\n        </div>\n        <h2>{loggedUserName}</h2>\n        <button\n          id=\"changeInfo\"\n          onClick={() => {\n            navigate('/infochange');\n          }}\n        >\n          <h3>정보수정</h3>\n        </button>\n      </div>\n      <div className=\"mainButtonSet\">\n        <button\n          id=\"webtoonList\"\n          onClick={() => {\n            navigate('/mainWebtoonList');\n          }}\n        >\n          웹툰 목록\n        </button>\n        <button\n          id=\"mypage\"\n          onClick={() => {\n            navigate('/mypage');\n          }}\n        >\n          마이페이지\n        </button>\n        <button\n          id=\"freeBoard\"\n          onClick={() => {\n            navigate('/freeboard');\n          }}\n        >\n          자유게시판\n        </button>\n        <button\n          id=\"logOut\"\n          onClick={async () => {\n            localStorage.removeItem('loggedUserPhoto');\n            localStorage.removeItem('loggedUserName');\n            localStorage.removeItem('loggedUserHashTag');\n            sessionStorage.removeItem('loggedUserEmail'); // 세션 스토리지에서 loggedUserEmail 제거\n\n            await supabase.auth.signOut();\n            navigate('/');\n          }}\n        >\n          로그아웃\n        </button>\n      </div>\n      {modalOpen && (\n        <ModalBasic\n          setModalOpen={setModalOpen}\n          setLoggedUserImage={setLoggedUserImage}\n          openModal={openModal}\n        />\n      )}\n      {props.children}\n    </div>\n  );\n}\n\nfunction ModalBasic({ setModalOpen, setLoggedUserImage, openModal }) {\n  const [selectedImage, setSelectedImage] = useState(\n    localStorage.getItem('loggedUserPhoto') || ex1\n  );\n  const [newImage, setNewImage] = useState(null);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      setSelectedImage(reader.result);\n      setNewImage(file);\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSave = async () => {\n    if (newImage) {\n      console.log('새 이미지 저장:', newImage);\n\n      const { data } = await supabase.auth.getSession();\n      axios\n        .post('toonder/photo/update', {\n          email: data.session.user.email,\n          image: selectedImage,\n        })\n        .then((res) => console.log(res))\n        .catch((error) => console.log(error));\n\n      localStorage.setItem('loggedUserPhoto', selectedImage);\n      setLoggedUserImage(selectedImage);\n    }\n\n    closeModal();\n  };\n\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    const handler = (event) => {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        setModalOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handler);\n\n    return () => {\n      document.removeEventListener('mousedown', handler);\n    };\n  }, []);\n\n  return (\n    <div className=\"profilechangeback\" >\n      <div className=\"profilechange\" ref={modalRef}>\n        <img id=\"changeinfoimg\" src={selectedImage} alt=\"image error\" />\n        <div id=\"changeFile\">\n          <label htmlFor=\"chooseFile\">\n            <h3>프로필 사진 변경</h3>\n          </label>\n        </div>\n        <div style={{ position: 'relative' }}>\n          <input\n            type=\"file\"\n            id=\"chooseFile\"\n            name=\"chooseFile\"\n            accept=\"image/*\"\n            onChange={handleFileChange}\n            style={{\n              position: 'absolute',\n              right: '-200px',\n              top: '0px',\n              marginTop: '10px',\n            }}\n          />\n        </div>\n        <div id=\"changeButtonSet\" style={{ marginTop: '25px' }}>\n          <button id=\"submitButton\" type=\"submit\" onClick={handleSave}>\n            <h3>저장</h3>\n          </button>\n          <br />\n          <button id=\"cancel\" onClick={closeModal}>\n            <h3>취소</h3>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MainBackSmall;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/ID_background.js",["176","177","178"],[],"import React from 'react';\nimport styles from '../../style.css';\nimport logo from '../../images/logoimage.png';\nimport { Link } from 'react-router-dom';\n\nfunction IDBackground(props) {\n  return (\n    <div className=\"id_background\">\n      <div className=\"find_logo\">\n        <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n        <strong>{props.text}</strong>\n      </div>\n      {props.children} {/* props.children 렌더링 */}\n    </div>\n  );\n}\n\nexport default IDBackground;\n\n",[],"/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/supabase.js",["179"],[],"import { createClient } from '@supabase/supabase-js';\nimport { Auth } from '@supabase/auth-ui-react';\n\nconst supabaseUrl = 'https://fsxogdtxxerrzpdgyyac.supabase.co/';\nconst supabaseKey =\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZzeG9nZHR4eGVycnpwZGd5eWFjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODI4NzA4NTQsImV4cCI6MTk5ODQ0Njg1NH0.4ayoRXi9Z0745i2dyqIjvm23CSBRK--iAFspUAy6pOw';\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport default supabase;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/mainBackground.js",["180","181","182","183","184"],[],"  import React, { useState, useEffect } from 'react';\n  import { useNavigate } from 'react-router-dom';\n  import logo from '../../images/logoimage.png';\n  import './backGround.module.css';\n  import axios from 'axios';\n\n  function MainBackgorund(props) {\n    const navigate = useNavigate();\n    const [loggedUserName, setLoggedUserName] = useState('지금 로그인하세요!');\n    const [webtoontitle, setWebtoontitle] = useState('');\n\n    const handleSearch = () => {\n      navigate(`/search?title=${webtoontitle}`);\n    };\n\n    return (\n      <div className=\"mainPageBack\">\n        <div className=\"logoSearch\">\n          <div className=\"mainLogo\">\n            <button\n              id=\"main_page\"\n              onClick={() => {\n                navigate('/main_page');\n              }}\n            >\n              <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n              <h1>Toonder</h1>\n            </button>\n          </div>\n          <div className=\"mainSearch\">\n          <input\n            id=\"mainSearchInput\"\n            type=\"text\"\n            placeholder=\"찾고싶은 웹툰 검색!\"\n            value={webtoontitle}\n            onChange={(e) => setWebtoontitle(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                handleSearch();\n              }\n            }}\n          />\n          <button id=\"mainSearchButton\" onClick={handleSearch}>\n            검색\n          </button>\n        </div>\n        </div>\n        {props.children}\n      </div>\n    );\n  }\n\n  export default MainBackgorund;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/backgrounds/backGround.js",["185","186"],[],"import React from 'react';\nimport styles from './backGround.module.css';\nimport logo from '../../images/logoimage.png';\nimport { Link } from 'react-router-dom';\n//\nfunction Background(props) {\n  return (\n    <div\n      className={styles.background}\n      style={{ backgroundSize: props.backgroundSize }} //백그라운드 사이즈를 props 객체로 전달해서 컴포넌트마다 사이즈를 조정해서 사용가능\n    >\n      <div\n        className={styles.logo}\n        style={\n          {\n            top: props.top,\n            left: props.left,\n          } /*로고 위치도 props로 전달받아 컴포넌트마다 위치를 조장해서 사용가능 */\n        }\n      >\n        <img src={logo} width=\"84px\" height=\"93px\" alt=\"image error\" />\n        <strong>{props.text}</strong>\n      </div>\n      {props.children} {/* props.children 렌더링 */}\n    </div>\n  );\n}\n\nexport default Background;","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/write.js",["187","188","189"],[],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './freeboard.css';\nimport MainBackgorund from '../backgrounds/mainBackground';\nimport axios from 'axios';\nimport supabase from '../supabase';\n\nfunction Write() {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [loggedUserName, setLoggedUserName] = useState();\n  const [email, setEmail] = useState();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session === null) {\n        alert('로그인을 먼저 해주세요.');\n        navigate('/');\n      } else {\n        const email = session.user.email;\n        setEmail(email);\n\n        const rdata = {\n          email: email,\n        };\n\n        axios\n          .post('toonder/name', rdata)\n          .then((loggedUserData) => {\n            setLoggedUserName(loggedUserData.data.mem_name);\n          })\n          .catch((error) => console.log(error));\n      }\n    };\n    fetchData();\n  }, []);\n\n  const handleTitleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  const handleContentChange = (event) => {\n    setContent(event.target.value);\n  };\n\n  const addConvertLine = (text) => {\n    return text.replace(/\\n/g, '@d`}');\n  };\n  //서브밋\n  const handleSubmit = async () => {\n    if (!title || !content) {\n      alert('제목과 내용을 작성해주세요.');\n      return;\n    }\n\n    const requestData = {\n      brdTitle: title,\n      brdContent: addConvertLine(content),\n      mem_name: loggedUserName,\n      mem_email: email,\n    };\n\n    try {\n      await axios.post('/toonder/board', requestData);\n      alert('글이 저장되었습니다.');\n      navigate(-1);\n    } catch (error) {\n      console.log(error);\n      alert('글을 저장하지 못했습니다.');\n    }\n  };\n\n  return (\n    <MainBackgorund>\n      <div className=\"writeboard\">\n        <br />\n        <h2>글쓰기</h2>\n        <br />\n        <input\n          style={{ fontSize: '20px' }}\n          className=\"title\"\n          type=\"text\"\n          placeholder=\"제목을 작성해주세요\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        <textarea\n          style={{ fontSize: '17px' }}\n          placeholder=\"내용을 작성해주세요.\"\n          value={content}\n          onChange={handleContentChange}\n        ></textarea>\n      </div>\n      <div style={{ position: 'relative' }}>\n        <button\n          id=\"save\"\n          style={{\n            position: 'absolute',\n            fontSize: '20px',\n            height: '36px',\n            color: 'rgb(255, 147, 147)',\n            display: 'flex',\n            backgroundColor: 'white',\n            justifyContent: 'center',\n            alignItems: 'center',\n            fontSize: '22px',\n            width: '80px',\n            borderRadius: '10px',\n            top: '-690px',\n            right: '65px',\n          }}\n          type=\"submit\"\n          onClick={handleSubmit}\n        >\n          저장\n        </button>\n      </div>\n    </MainBackgorund>\n  );\n}\n\nexport default Write;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/freeboard/postview.js",["190","191","192","193","194"],[],"import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport MainBackground from '../backgrounds/mainBackground';\nimport styles from './postview.module.css';\nimport supabase from '../supabase';\nfunction PostView() {\n  // 라우터\n  const navigate = useNavigate();\n  const location = useLocation();\n  const brdNo = location.state?.brdNo;\n\n  // state\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [email, setEmail] = useState();\n  const [editedComment, setEditedComment] = useState('');\n  const [editingCommentId, setEditingCommentId] = useState('');\n  const [comment, setComment] = useState('');\n  const [isCommentDelete, setIsCommentDelete] = useState(false);\n  const [isClickCommentLike, setIsClickCommentLike] = useState(false);\n  //줄바꿈기능\n  const convertLine = (text) => {\n    return text.split('@d`}').map((line, index) => (\n      <React.Fragment key={index}>\n        {line}\n        <br />\n      </React.Fragment>\n    ));\n  };\n  const convertLineForTextarea = (text) => {\n    return text.replaceAll('@d`}', '\\n');\n  };\n\n  const addConvertLine = (text) => {\n    return text.replace(/\\n/g, '@d`}');\n  };\n\n  //이메일 불러오기\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data, error } = await supabase.auth.getSession();\n      const session = data.session;\n\n      if (session === null) {\n        alert('로그인을 먼저 해주세요.');\n        navigate('/');\n      } else {\n        const email = session.user.email;\n        setEmail(email);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 게시글 불러오기\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`/toonder/board/${brdNo}`);\n        setPost(response.data);\n      } catch (error) {\n        console.log(error);\n        alert('게시글을 불러오지 못했습니다.');\n      } finally {\n      }\n    };\n\n    fetchData();\n  }, [brdNo]);\n\n  const handleEditContent = () => {\n    if (post.mem_email !== email) {\n      alert('본인의 게시글만 수정이 가능합니다.');\n      return;\n    } else {\n      navigate('/edit', {\n        state: { brdNo: post.brdNo },\n      });\n    }\n  };\n\n  // 댓글 불러오기\n  useEffect(() => {\n    const fetchComments = async () => {\n      try {\n        const response = await axios.get(`/toonder/board/${brdNo}/comment`);\n        setComments(response.data);\n      } catch (error) {\n        console.log(error);\n        alert('댓글을 불러오지 못했습니다.');\n      } finally {\n        setIsCommentDelete(false);\n        setIsClickCommentLike(false);\n      }\n    };\n\n    fetchComments();\n  }, [brdNo, isCommentDelete, isClickCommentLike]);\n\n  //댓글 좋아요\n  const handleLikeComment = async (cmtNo) => {\n    try {\n      const headers = {\n        mem_email: email,\n      };\n      await axios.post(`/toonder/board/${brdNo}/comment/${cmtNo}/like`, null, {\n        headers,\n      });\n      alert('댓글 좋아요가 반영되었습니다.');\n    } catch (error) {\n      console.log(error);\n      alert('좋아요가 실패 했습니다.');\n    }\n  };\n\n  // 게시글 삭제\n  const handleDelete = async () => {\n    try {\n      await axios.delete(`/toonder/board/${brdNo}`, {\n        data: { mem_email: email },\n      });\n      alert('삭제가 성공했습니다.');\n      navigate('/freeboard');\n    } catch (error) {\n      console.log(error);\n      alert('본인의 게시글만 삭제가 가능합니다.');\n    }\n  };\n\n  //게시글 좋아요\n  const handleLike = async () => {\n    try {\n      const headers = {\n        mem_email: email,\n      };\n      await axios.post(`/toonder/board/${brdNo}/like`, null, {\n        headers,\n      });\n      alert('좋아요가 반영되었습니다.');\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n      alert('좋아요가 실패 했습니다.');\n    }\n  };\n\n  // 댓글 삭제\n  const handleDeleteComment = async (cmtContent, cmtBno) => {\n    try {\n      await axios.delete(`/toonder/board/${brdNo}/comment/${cmtBno}`, {\n        data: { cmtContent: cmtContent, mem_email: email },\n      });\n      alert('댓글이 삭제되었습니다.');\n      setIsCommentDelete(true);\n    } catch (error) {\n      console.log(error);\n      alert('본인의 댓글만 수정이 가능합니다.');\n    }\n  };\n\n  // 댓글 수정\n  const handleEditComment = (commentId, content) => {\n    setEditingCommentId(commentId);\n    setEditedComment(content);\n  };\n\n  // 댓글 수정 보내기\n  const handleSubmitEditedComment = async (commentId) => {\n    if (!editedComment) {\n      alert('댓글을 입력하세요.');\n      return;\n    }\n\n    try {\n      const addLineComment = addConvertLine(editedComment);\n      await axios.put(`/toonder/board/${brdNo}/comment/${commentId}`, {\n        cmtContent: addLineComment,\n        mem_email: email,\n      });\n      alert('댓글이 수정되었습니다.');\n      setEditingCommentId(null);\n      setEditedComment('');\n\n      const response = await axios.get(`/toonder/board/${brdNo}/comment`);\n      setComments(response.data);\n    } catch (error) {\n      console.log(error);\n      alert('본인의 댓글만 수정이 가능합니다.');\n      setEditingCommentId(null);\n    }\n  };\n\n  // 댓글 보내기\n  const handleSubmitComment = async (e) => {\n    e.preventDefault();\n    if (!comment) {\n      alert('댓글을 입력하세요.');\n      return;\n    }\n    const name = localStorage.getItem('loggedUserName');\n    try {\n      const addLineComment = addConvertLine(comment);\n      await axios.post(`/toonder/board/${brdNo}/comment`, {\n        cmtContent: addLineComment,\n        mem_name: name,\n        mem_email: email,\n      });\n      alert('댓글이 작성되었습니다.');\n      setComment('');\n\n      const response = await axios.get(`/toonder/board/${brdNo}/comment`);\n      setComments(response.data);\n    } catch (error) {\n      console.log(error);\n      alert('댓글 작성에 실패했습니다.');\n    }\n  };\n\n  // 게시글 목록을 불러오고나서 랜딩하기 위함\n  if (!post) {\n    return null;\n  }\n\n  const { brdTitle, brdContent, mem_name, brdRegDate, brdViewCount, brdLike } =\n    post;\n  const formattedDate = brdRegDate.split('T')[0];\n\n  return (\n    <MainBackground>\n      <div className=\"postboard\">\n        <br />\n        <h2>자유게시판</h2>\n        <br />\n        <div id=\"postinfo\">\n          <h1>{brdTitle}</h1>\n          <br />\n          <h4>\n            {mem_name} &nbsp;|&nbsp; 조회수 : {brdViewCount} &nbsp;|&nbsp;{' '}\n            {formattedDate} &nbsp;|&nbsp; 좋아요 : {brdLike}\n            <div className={styles.contentButtons}>\n              <button\n                onClick={() => {\n                  handleLike();\n                }}\n              >\n                ☺︎\n              </button>{' '}\n              &nbsp;|&nbsp;{' '}\n              <button\n                onClick={() => {\n                  handleEditContent();\n                }}\n              >\n                수정\n              </button>{' '}\n              &nbsp;|&nbsp; <button onClick={handleDelete}>삭제</button>\n            </div>\n          </h4>\n        </div>\n        <div id=\"postcontent\">\n          <h3>[내용]</h3>\n          <div\n            style={{\n              borderTop: '1px solid rgb(255, 147, 147)',\n              width: '100%',\n              margin: '10px 0',\n            }}\n          />\n          <br />\n          <p>{convertLine(brdContent)}</p>\n        </div>\n        <div id=\"repl2\">\n          <h3>[댓글]</h3>\n          <div\n            style={{\n              borderTop: '1px solid rgb(255, 147, 147)',\n              width: '100%',\n              margin: '10px 0',\n            }}\n          />\n          {comments.map((comment) => (\n            <div key={comment.cmtNo}>\n              <br />\n              {editingCommentId === comment.cmtNo ? (\n                <>\n                  &nbsp;&nbsp;\n                  <textarea\n                    className={styles.editedCommentInput}\n                    value={convertLineForTextarea(editedComment)}\n                    onChange={(e) => setEditedComment(e.target.value)}\n                  ></textarea>\n                  <div className={styles.metaDataWrap}>\n                    <div className={styles.metaData}>\n                      <a\n                        onClick={() => handleSubmitEditedComment(comment.cmtNo)}\n                      >\n                        수정 완료\n                      </a>{' '}\n                      |{' '}\n                      <a onClick={() => setEditingCommentId(null)}>수정 취소</a>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <>\n                  {' '}\n                  {comment.memName}\n                  <div className={styles.wrapContent}>\n                    : {convertLine(comment.cmtContent)}\n                  </div>\n                  <div className={styles.metaDataWrap}>\n                    <p className={styles.metaData}>\n                      {comment.cmtRegDate.split('T')[0]} &nbsp;|&nbsp; 좋아요 :{' '}\n                      {comment.cmtLike}\n                      <div className={styles.commentClicker}>\n                        <button\n                          onClick={() => {\n                            handleLikeComment(comment.cmtNo);\n                            setIsClickCommentLike(true);\n                          }}\n                        >\n                          ☺︎\n                        </button>{' '}\n                        |{' '}\n                        <button\n                          onClick={() =>\n                            handleEditComment(comment.cmtNo, comment.cmtContent)\n                          }\n                        >\n                          수정\n                        </button>{' '}\n                        |{' '}\n                        <button\n                          onClick={() =>\n                            handleDeleteComment(\n                              comment.cmtContent,\n                              comment.cmtNo\n                            )\n                          }\n                        >\n                          삭제\n                        </button>{' '}\n                      </div>\n                    </p>\n                  </div>\n                </>\n              )}\n            </div>\n          ))}\n        </div>\n        <div id=\"commentwrite\">\n          <form onSubmit={handleSubmitComment}>\n            <textarea\n              className={styles.commentInput}\n              value={comment}\n              onChange={(e) => setComment(e.target.value)}\n              placeholder=\"댓글을 작성하세요\"\n            ></textarea>\n            <div className={styles.commentSubmit}>\n              <a\n                style={{\n                  position: 'absolute',\n                  fontSize: '24px',\n                }}\n                type=\"submit\"\n                onClick={handleSubmitComment}\n              >\n                작성\n              </a>\n            </div>\n          </form>\n        </div>\n      </div>\n    </MainBackground>\n  );\n}\n\nexport default PostView;\n","/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/src/component/main/search.js",["195","196","197"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport './mainPage.css';\r\nimport axios from 'axios';\r\nimport MainBackgorund from '../backgrounds/mainBackground';\r\nimport toTop from '../../images/toTop.png';\r\nimport MainBackSmall from '../backgrounds/mainBackSmall';\r\nimport { FaSpinner } from 'react-icons/fa';\r\n\r\nfunction Search(props) {\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const searchTitle = queryParams.get('title');\r\n\r\n  const [webtoonList, setWebToonList] = useState([]);\r\n  const [countPage, setCountPage] = useState(1);\r\n  const [firstLoading, setFirstLoading] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [showNavigationToScrollTop, setShowNavigationToScrollTop] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  function onScroll() {\r\n    const windowHeight =\r\n        window.innerHeight || document.documentElement.clientHeight;\r\n      const documentHeight = document.documentElement.scrollHeight;\r\n      const scrolledToBottom =\r\n        Math.ceil(window.scrollY + windowHeight) >= documentHeight;\r\n\r\n        //console.log(window.scrollY)\r\n      if (window.scrollY === 0) {\r\n        setShowNavigationToScrollTop(false)\r\n      }\r\n      else {\r\n        setShowNavigationToScrollTop(true)\r\n      }\r\n\r\n      if (scrolledToBottom) {\r\n        setIsLoading(true)\r\n        setCountPage(countPage+1)\r\n      }\r\n  }\r\n\r\n  useEffect(()=> {\r\n    //console.log(showNavigationToScrollTop)\r\n    if (!isLoading){\r\n      window.addEventListener(\"scroll\", onScroll)\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll)\r\n    };\r\n    }\r\n\r\n\r\n  })\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get('toonder/webtoon?p_num='+countPage)\r\n      .then(res => {\r\n        setCountPage(countPage+1)\r\n        if (webtoonList.length === 0){\r\n          setIsLoading(false)\r\n          setWebToonList(res.data)\r\n          setFirstLoading(false)\r\n        }\r\n        else{\r\n          setIsLoading(false)\r\n          setWebToonList(webtoonList.concat(res.data))\r\n          console.log(countPage);\r\n      }\r\n\r\n      })\r\n  },[countPage])\r\n\r\n  const listCreator = () => {\r\n    var countForTrSplit = 1;\r\n    var trWebtoonList = [];\r\n    return(\r\n      <>\r\n      {firstLoading ? (\r\n         <div id='firstLoading'>\r\n         <FaSpinner className=\"loadingIcon\" />\r\n       </div>\r\n      ) : (\r\n        <>\r\n        <table>\r\n\r\n          {\r\n            webtoonList\r\n              .filter((webtoonInfo) => webtoonInfo.title.includes(searchTitle))\r\n              .map(\r\n              (webtoonInfo) => {\r\n                if (countForTrSplit === 1) {\r\n                  trWebtoonList = []\r\n                }\r\n\r\n                trWebtoonList.push(webtoonInfo)\r\n                if (countForTrSplit > 0){\r\n                  countForTrSplit = 1;\r\n                  return (\r\n                    <tr>\r\n                      <tr>\r\n                      {\r\n                        trWebtoonList.map(trWebtoonInfo => (\r\n                          <td>\r\n                            <tr>\r\n                              <td>\r\n                                <button onClick={() => {navigate('/mainwebtooninfo', {state : {mastrId : trWebtoonInfo.mastrId}});}}>\r\n                                  <img src={trWebtoonInfo.imageDownloadUrl} alt=\"image error\" />\r\n                                </button>\r\n                              </td>\r\n                            </tr>\r\n                            <tr style={{height:'65px'}}>\r\n                              <td style={{height:'75px'}}>\r\n                              <p className=\"webtoonTitle\">\r\n                                {trWebtoonInfo.title}\r\n                              </p>\r\n                              </td>\r\n                            </tr>\r\n                          </td>\r\n                        ))\r\n                      }\r\n                      </tr>\r\n                    </tr>\r\n\r\n                  )\r\n                }\r\n                else {\r\n                  countForTrSplit += 1;\r\n                }\r\n              }\r\n              )\r\n          }\r\n\r\n      </table>\r\n      {isLoading ? ( // 로딩 중일 때의 화면\r\n            <div id='isLoading'>\r\n              <FaSpinner className=\"loadingIcon\" />\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )\r\n          }\r\n        </>\r\n      )\r\n      }\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <MainBackgorund>\r\n        <MainBackSmall>\r\n        <div className='mainWebtoonList'>\r\n            {listCreator()}\r\n        </div>\r\n\r\n        {showNavigationToScrollTop ? (\r\n          <div id='showNavigationToScrollTop'\r\n          onClick={() => {window.scrollTo({ top: 0, behavior: 'smooth' })}}>\r\n            <img src={toTop} alt=\"To Top\" style={{height:'100%', wigth:'100%'}}/>\r\n        </div>):\r\n        null}\r\n\r\n\r\n      </MainBackSmall>\r\n\r\n    </MainBackgorund>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n",{"ruleId":"198","severity":1,"message":"199","line":3,"column":17,"nodeType":"200","messageId":"201","endLine":3,"endColumn":26},{"ruleId":"198","severity":1,"message":"202","line":3,"column":28,"nodeType":"200","messageId":"201","endLine":3,"endColumn":36},{"ruleId":"198","severity":1,"message":"203","line":18,"column":8,"nodeType":"200","messageId":"201","endLine":18,"endColumn":13},{"ruleId":"204","severity":1,"message":"205","line":28,"column":48,"nodeType":"206","messageId":"207","endLine":28,"endColumn":64},{"ruleId":"198","severity":1,"message":"208","line":4,"column":8,"nodeType":"200","messageId":"201","endLine":4,"endColumn":14},{"ruleId":"198","severity":1,"message":"209","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":21},{"ruleId":"210","severity":1,"message":"211","line":15,"column":5,"nodeType":"212","endLine":15,"endColumn":7,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":22,"column":11,"nodeType":"206","endLine":22,"endColumn":46},{"ruleId":"198","severity":1,"message":"216","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":23},{"ruleId":"198","severity":1,"message":"217","line":6,"column":8,"nodeType":"200","messageId":"201","endLine":6,"endColumn":11},{"ruleId":"198","severity":1,"message":"218","line":7,"column":8,"nodeType":"200","messageId":"201","endLine":7,"endColumn":11},{"ruleId":"198","severity":1,"message":"219","line":8,"column":8,"nodeType":"200","messageId":"201","endLine":8,"endColumn":11},{"ruleId":"198","severity":1,"message":"220","line":9,"column":8,"nodeType":"200","messageId":"201","endLine":9,"endColumn":11},{"ruleId":"198","severity":1,"message":"221","line":10,"column":8,"nodeType":"200","messageId":"201","endLine":10,"endColumn":11},{"ruleId":"198","severity":1,"message":"222","line":11,"column":8,"nodeType":"200","messageId":"201","endLine":11,"endColumn":11},{"ruleId":"198","severity":1,"message":"223","line":12,"column":8,"nodeType":"200","messageId":"201","endLine":12,"endColumn":11},{"ruleId":"198","severity":1,"message":"224","line":13,"column":8,"nodeType":"200","messageId":"201","endLine":13,"endColumn":11},{"ruleId":"210","severity":1,"message":"225","line":76,"column":5,"nodeType":"212","endLine":76,"endColumn":16,"suggestions":"226"},{"ruleId":"227","severity":1,"message":"228","line":92,"column":29,"nodeType":"229","messageId":"230","endLine":92,"endColumn":31},{"ruleId":"214","severity":1,"message":"215","line":110,"column":35,"nodeType":"206","endLine":110,"endColumn":97},{"ruleId":"198","severity":1,"message":"231","line":10,"column":10,"nodeType":"200","messageId":"201","endLine":10,"endColumn":24},{"ruleId":"232","severity":1,"message":"233","line":46,"column":17,"nodeType":"206","endLine":46,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":47,"column":17,"nodeType":"206","endLine":47,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":48,"column":17,"nodeType":"206","endLine":48,"endColumn":44},{"ruleId":"232","severity":1,"message":"233","line":49,"column":17,"nodeType":"206","endLine":49,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":50,"column":17,"nodeType":"206","endLine":50,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":51,"column":17,"nodeType":"206","endLine":51,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":52,"column":17,"nodeType":"206","endLine":52,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":53,"column":17,"nodeType":"206","endLine":53,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":54,"column":17,"nodeType":"206","endLine":54,"endColumn":29},{"ruleId":"232","severity":1,"message":"233","line":55,"column":17,"nodeType":"206","endLine":55,"endColumn":29},{"ruleId":"198","severity":1,"message":"234","line":21,"column":21,"nodeType":"200","messageId":"201","endLine":21,"endColumn":26},{"ruleId":"210","severity":1,"message":"235","line":32,"column":6,"nodeType":"212","endLine":32,"endColumn":8,"suggestions":"236"},{"ruleId":"198","severity":1,"message":"237","line":9,"column":10,"nodeType":"200","messageId":"201","endLine":9,"endColumn":21},{"ruleId":"198","severity":1,"message":"234","line":21,"column":21,"nodeType":"200","messageId":"201","endLine":21,"endColumn":26},{"ruleId":"210","severity":1,"message":"235","line":45,"column":6,"nodeType":"212","endLine":45,"endColumn":8,"suggestions":"238"},{"ruleId":"214","severity":1,"message":"215","line":137,"column":29,"nodeType":"206","endLine":145,"endColumn":31},{"ruleId":"198","severity":1,"message":"216","line":1,"column":38,"nodeType":"200","messageId":"201","endLine":1,"endColumn":44},{"ruleId":"198","severity":1,"message":"239","line":206,"column":13,"nodeType":"200","messageId":"201","endLine":206,"endColumn":17},{"ruleId":"240","severity":1,"message":"241","line":56,"column":11,"nodeType":"206","endLine":56,"endColumn":16},{"ruleId":"198","severity":1,"message":"242","line":22,"column":9,"nodeType":"200","messageId":"201","endLine":22,"endColumn":19},{"ruleId":"214","severity":1,"message":"215","line":70,"column":11,"nodeType":"206","endLine":70,"endColumn":71},{"ruleId":"210","severity":1,"message":"243","line":192,"column":6,"nodeType":"212","endLine":192,"endColumn":8,"suggestions":"244"},{"ruleId":"214","severity":1,"message":"215","line":197,"column":9,"nodeType":"206","endLine":197,"endColumn":73},{"ruleId":"198","severity":1,"message":"208","line":2,"column":8,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"245","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":14},{"ruleId":"214","severity":1,"message":"215","line":10,"column":9,"nodeType":"206","endLine":10,"endColumn":72},{"ruleId":"198","severity":1,"message":"246","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"199","line":1,"column":29,"nodeType":"200","messageId":"201","endLine":1,"endColumn":38},{"ruleId":"198","severity":1,"message":"203","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":15},{"ruleId":"198","severity":1,"message":"231","line":9,"column":12,"nodeType":"200","messageId":"201","endLine":9,"endColumn":26},{"ruleId":"198","severity":1,"message":"247","line":9,"column":28,"nodeType":"200","messageId":"201","endLine":9,"endColumn":45},{"ruleId":"214","severity":1,"message":"215","line":26,"column":15,"nodeType":"206","endLine":26,"endColumn":78},{"ruleId":"198","severity":1,"message":"245","line":4,"column":10,"nodeType":"200","messageId":"201","endLine":4,"endColumn":14},{"ruleId":"214","severity":1,"message":"215","line":21,"column":9,"nodeType":"206","endLine":21,"endColumn":72},{"ruleId":"198","severity":1,"message":"234","line":17,"column":21,"nodeType":"200","messageId":"201","endLine":17,"endColumn":26},{"ruleId":"210","severity":1,"message":"235","line":40,"column":6,"nodeType":"212","endLine":40,"endColumn":8,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":110,"column":13,"nodeType":"251","messageId":"252","endLine":110,"endColumn":21},{"ruleId":"198","severity":1,"message":"234","line":42,"column":21,"nodeType":"200","messageId":"201","endLine":42,"endColumn":26},{"ruleId":"210","severity":1,"message":"235","line":54,"column":6,"nodeType":"212","endLine":54,"endColumn":8,"suggestions":"253"},{"ruleId":"232","severity":1,"message":"254","line":295,"column":23,"nodeType":"206","endLine":297,"endColumn":24},{"ruleId":"232","severity":1,"message":"254","line":301,"column":23,"nodeType":"206","endLine":301,"endColumn":68},{"ruleId":"232","severity":1,"message":"254","line":361,"column":15,"nodeType":"206","endLine":368,"endColumn":16},{"ruleId":"210","severity":1,"message":"225","line":73,"column":5,"nodeType":"212","endLine":73,"endColumn":16,"suggestions":"255"},{"ruleId":"227","severity":1,"message":"228","line":92,"column":29,"nodeType":"229","messageId":"230","endLine":92,"endColumn":31},{"ruleId":"214","severity":1,"message":"215","line":109,"column":35,"nodeType":"206","endLine":109,"endColumn":97},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","react/jsx-pascal-case","Imported JSX component Findid_after must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'styles' is defined but never used.","'useNavigate' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'mastrId'. Either include it or remove the dependency array.","ArrayExpression",["256"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'useRef' is defined but never used.","'ex1' is defined but never used.","'ex2' is defined but never used.","'ex3' is defined but never used.","'ex4' is defined but never used.","'ex5' is defined but never used.","'ex6' is defined but never used.","'ex7' is defined but never used.","'ex8' is defined but never used.","React Hook useEffect has a missing dependency: 'webtoonList'. Either include it or remove the dependency array. You can also do a functional update 'setWebToonList(w => ...)' if you only need 'webtoonList' in the 'setWebToonList' call.",["257"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'loggedUserName' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["258"],"'useLocation' is defined but never used.",["259"],"'data' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'closeModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setModalOpen'. Either include it or remove the dependency array. If 'setModalOpen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["260"],"'Link' is defined but never used.","'Auth' is defined but never used.","'setLoggedUserName' is assigned a value but never used.",["261"],"no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected",["262"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["263"],{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"268","fix":"270"},{"desc":"271","fix":"272"},{"desc":"268","fix":"273"},{"desc":"268","fix":"274"},{"desc":"266","fix":"275"},"Update the dependencies array to be: [mastrId]",{"range":"276","text":"277"},"Update the dependencies array to be: [countPage, webtoonList]",{"range":"278","text":"279"},"Update the dependencies array to be: [navigate]",{"range":"280","text":"281"},{"range":"282","text":"281"},"Update the dependencies array to be: [setModalOpen]",{"range":"283","text":"284"},{"range":"285","text":"281"},{"range":"286","text":"281"},{"range":"287","text":"279"},[427,429],"[mastrId]",[2258,2269],"[countPage, webtoonList]",[1137,1139],"[navigate]",[1343,1345],[5031,5033],"[setModalOpen]",[1126,1128],[1613,1615],[2187,2198]]