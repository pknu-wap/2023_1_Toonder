{"ast":null,"code":"import PostgrestFilterBuilder from './PostgrestFilterBuilder';\nexport default class PostgrestQueryBuilder {\n  constructor(url, _ref) {\n    let {\n      headers = {},\n      schema,\n      fetch\n    } = _ref;\n    this.url = url;\n    this.headers = headers;\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  select(columns) {\n    let {\n      head = false,\n      count\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = head ? 'HEAD' : 'GET';\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`;\n    }\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\n   * Perform an INSERT into the table or view.\n   *\n   * By default, inserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to insert. Pass an object to insert a single row\n   * or an array to insert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count inserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column.\n   */\n  insert(values) {\n    let {\n      count,\n      defaultToNull = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = 'POST';\n    const prefersHeaders = [];\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer']);\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default');\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n   * exist, or if it does exist, perform an alternative action depending on\n   * `ignoreDuplicates`.\n   *\n   * By default, upserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to upsert with. Pass an object to upsert a\n   * single row or an array to upsert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n   * duplicate rows are determined. Two rows are duplicates if all the\n   * `onConflict` columns are equal.\n   *\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n   * `false`, duplicate rows are merged with existing rows.\n   *\n   * @param options.count - Count algorithm to use to count upserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. This only applies when\n   * inserting new rows, not when merging with existing rows under\n   * `ignoreDuplicates: false`.\n   */\n  upsert(values) {\n    let {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = 'POST';\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer']);\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default');\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map(column => `\"${column}\"`);\n        this.url.searchParams.set('columns', uniqueColumns.join(','));\n      }\n    }\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\n   * Perform an UPDATE on the table or view.\n   *\n   * By default, updated rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param values - The values to update with\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count updated rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  update(values) {\n    let {\n      count\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const method = 'PATCH';\n    const prefersHeaders = [];\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer']);\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n  /**\n   * Perform a DELETE on the table or view.\n   *\n   * By default, deleted rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count deleted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  delete() {\n    let {\n      count\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const method = 'DELETE';\n    const prefersHeaders = [];\n    if (count) {\n      prefersHeaders.push(`count=${count}`);\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer']);\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',');\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false\n    });\n  }\n}","map":{"version":3,"names":["PostgrestFilterBuilder","PostgrestQueryBuilder","constructor","url","_ref","headers","schema","fetch","select","columns","head","count","arguments","length","undefined","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","allowEmpty","insert","values","defaultToNull","prefersHeaders","push","Array","isArray","reduce","acc","x","concat","Object","keys","uniqueColumns","Set","column","body","upsert","onConflict","ignoreDuplicates","update","delete","unshift"],"sources":["C:\\Temp\\2023_1_Toonder\\toonder\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestQueryBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport { GetResult } from './select-query-parser'\nimport { Fetch, GenericSchema, GenericTable, GenericView } from './types'\n\nexport default class PostgrestQueryBuilder<\n  Schema extends GenericSchema,\n  Relation extends GenericTable | GenericView\n> {\n  url: URL\n  headers: Record<string, string>\n  schema?: string\n  signal?: AbortSignal\n  fetch?: Fetch\n\n  constructor(\n    url: URL,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: string\n      fetch?: Fetch\n    }\n  ) {\n    this.url = url\n    this.headers = headers\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  select<Query extends string = '*', ResultOne = GetResult<Schema, Relation['Row'], Query>>(\n    columns?: Query,\n    {\n      head = false,\n      count,\n    }: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], ResultOne[]> {\n    const method = head ? 'HEAD' : 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<ResultOne[]>)\n  }\n\n  /**\n   * Perform an INSERT into the table or view.\n   *\n   * By default, inserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to insert. Pass an object to insert a single row\n   * or an array to insert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count inserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column.\n   */\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      count,\n      defaultToNull = true,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\n    const method = 'POST'\n\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n   * exist, or if it does exist, perform an alternative action depending on\n   * `ignoreDuplicates`.\n   *\n   * By default, upserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to upsert with. Pass an object to upsert a\n   * single row or an array to upsert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n   * duplicate rows are determined. Two rows are duplicates if all the\n   * `onConflict` columns are equal.\n   *\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n   * `false`, duplicate rows are merged with existing rows.\n   *\n   * @param options.count - Count algorithm to use to count upserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. This only applies when\n   * inserting new rows, not when merging with existing rows under\n   * `ignoreDuplicates: false`.\n   */\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true,\n    }: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\n    const method = 'POST'\n\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform an UPDATE on the table or view.\n   *\n   * By default, updated rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param values - The values to update with\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count updated rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\n    values: Row,\n    {\n      count,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\n    const method = 'PATCH'\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform a DELETE on the table or view.\n   *\n   * By default, deleted rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count deleted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  delete({\n    count,\n  }: {\n    count?: 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<Schema, Relation['Row'], null> {\n    const method = 'DELETE'\n    const prefersHeaders = []\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}