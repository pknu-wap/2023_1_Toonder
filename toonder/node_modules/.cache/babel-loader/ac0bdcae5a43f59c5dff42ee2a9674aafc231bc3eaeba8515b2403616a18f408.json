{"ast":null,"code":"import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ',';\n    }\n    this.headers['Prefer'] += 'return=representation';\n    return this;\n  }\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order foreign tables, but it doesn't affect the ordering of the\n   * current table.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.foreignTable - Set this to order a foreign table by foreign\n   * columns\n   */\n  order(column) {\n    let {\n      ascending = true,\n      nullsFirst,\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = foreignTable ? `${foreignTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  limit(count) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `from` and `to` inclusively.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  range(from, to) {\n    let {\n      foreignTable\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`;\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`);\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    this.allowEmpty = true;\n    return this;\n  }\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson() {\n    this.headers['Accept'] = 'application/geo+json';\n    return this;\n  }\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain() {\n    let {\n      analyze = false,\n      verbose = false,\n      settings = false,\n      buffers = false,\n      wal = false,\n      format = 'text'\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept'];\n    this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n    if (format === 'json') return this;else return this;\n  }\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback() {\n    var _a;\n    if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback';\n    } else {\n      this.headers['Prefer'] = 'tx=rollback';\n    }\n    return this;\n  }\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n  returns() {\n    return this;\n  }\n}","map":{"version":3,"names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","arguments","length","undefined","key","existingOrder","get","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","allowEmpty","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","rollback","_a","trim","returns"],"sources":["C:\\Temp\\2023_1_Toonder\\toonder\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport { GetResult } from './select-query-parser'\nimport { GenericSchema } from './types'\n\nexport default class PostgrestTransformBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result\n> extends PostgrestBuilder<Result> {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select<Query extends string = '*', NewResultOne = GetResult<Schema, Row, Query>>(\n    columns?: Query\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[]> {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ','\n    }\n    this.headers['Prefer'] += 'return=representation'\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResultOne[]>\n  }\n\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\n  ): this\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable: string }\n  ): this\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order foreign tables, but it doesn't affect the ordering of the\n   * current table.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.foreignTable - Set this to order a foreign table by foreign\n   * columns\n   */\n  order(\n    column: string,\n    {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = foreignTable ? `${foreignTable}.order` : 'order'\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limit the query result by `from` and `to` inclusively.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PostgrestBuilder<ResultOne>\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne | null> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    this.allowEmpty = true\n    return this as PostgrestBuilder<ResultOne | null>\n  }\n\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv(): PostgrestBuilder<string> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\n    this.headers['Accept'] = 'application/geo+json'\n    return this as PostgrestBuilder<Record<string, unknown>>\n  }\n\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text',\n  }: {\n    analyze?: boolean\n    verbose?: boolean\n    settings?: boolean\n    buffers?: boolean\n    wal?: boolean\n    format?: 'json' | 'text'\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\n    const options = [\n      analyze ? 'analyze' : null,\n      verbose ? 'verbose' : null,\n      settings ? 'settings' : null,\n      buffers ? 'buffers' : null,\n      wal ? 'wal' : null,\n    ]\n      .filter(Boolean)\n      .join('|')\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept']\n    this.headers[\n      'Accept'\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\n    if (format === 'json') return this as PostgrestBuilder<Record<string, unknown>[]>\n    else return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback(): this {\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback'\n    } else {\n      this.headers['Prefer'] = 'tx=rollback'\n    }\n    return this\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n  returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult> {\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult>\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}