{"ast":null,"code":"import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(channel, event) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_TIMEOUT;\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload;\n    this.timeout = timeout;\n    this.sent = false;\n    this.timeoutTimer = undefined;\n    this.ref = '';\n    this.receivedResp = null;\n    this.recHooks = [];\n    this.refEvent = null;\n    this.rateLimited = false;\n  }\n  resend(timeout) {\n    this.timeout = timeout;\n    this._cancelRefEvent();\n    this.ref = '';\n    this.refEvent = null;\n    this.receivedResp = null;\n    this.sent = false;\n    this.send();\n  }\n  send() {\n    if (this._hasReceived('timeout')) {\n      return;\n    }\n    this.startTimeout();\n    this.sent = true;\n    const status = this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel._joinRef()\n    });\n    if (status === 'rate limited') {\n      this.rateLimited = true;\n    }\n  }\n  updatePayload(payload) {\n    this.payload = Object.assign(Object.assign({}, this.payload), payload);\n  }\n  receive(status, callback) {\n    var _a;\n    if (this._hasReceived(status)) {\n      callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n    }\n    this.recHooks.push({\n      status,\n      callback\n    });\n    return this;\n  }\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return;\n    }\n    this.ref = this.channel.socket._makeRef();\n    this.refEvent = this.channel._replyEventName(this.ref);\n    const callback = payload => {\n      this._cancelRefEvent();\n      this._cancelTimeout();\n      this.receivedResp = payload;\n      this._matchReceive(payload);\n    };\n    this.channel._on(this.refEvent, {}, callback);\n    this.timeoutTimer = setTimeout(() => {\n      this.trigger('timeout', {});\n    }, this.timeout);\n  }\n  trigger(status, response) {\n    if (this.refEvent) this.channel._trigger(this.refEvent, {\n      status,\n      response\n    });\n  }\n  destroy() {\n    this._cancelRefEvent();\n    this._cancelTimeout();\n  }\n  _cancelRefEvent() {\n    if (!this.refEvent) {\n      return;\n    }\n    this.channel._off(this.refEvent, {});\n  }\n  _cancelTimeout() {\n    clearTimeout(this.timeoutTimer);\n    this.timeoutTimer = undefined;\n  }\n  _matchReceive(_ref) {\n    let {\n      status,\n      response\n    } = _ref;\n    this.recHooks.filter(h => h.status === status).forEach(h => h.callback(response));\n  }\n  _hasReceived(status) {\n    return this.receivedResp && this.receivedResp.status === status;\n  }\n}","map":{"version":3,"names":["DEFAULT_TIMEOUT","Push","constructor","channel","event","payload","arguments","length","undefined","timeout","sent","timeoutTimer","ref","receivedResp","recHooks","refEvent","rateLimited","resend","_cancelRefEvent","send","_hasReceived","startTimeout","status","socket","push","topic","join_ref","_joinRef","updatePayload","Object","assign","receive","callback","_a","response","_makeRef","_replyEventName","_cancelTimeout","_matchReceive","_on","setTimeout","trigger","_trigger","destroy","_off","clearTimeout","_ref","filter","h","forEach"],"sources":["/Users/louis/Desktop/toonder/2023_1_Toonder/toonder/node_modules/@supabase/realtime-js/src/lib/push.ts"],"sourcesContent":["import { DEFAULT_TIMEOUT } from '../lib/constants'\nimport type RealtimeChannel from '../RealtimeChannel'\n\nexport default class Push {\n  sent: boolean = false\n  timeoutTimer: number | undefined = undefined\n  ref: string = ''\n  receivedResp: {\n    status: string\n    response: { [key: string]: any }\n  } | null = null\n  recHooks: {\n    status: string\n    callback: Function\n  }[] = []\n  refEvent: string | null = null\n  rateLimited: boolean = false\n\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(\n    public channel: RealtimeChannel,\n    public event: string,\n    public payload: { [key: string]: any } = {},\n    public timeout: number = DEFAULT_TIMEOUT\n  ) {}\n\n  resend(timeout: number) {\n    this.timeout = timeout\n    this._cancelRefEvent()\n    this.ref = ''\n    this.refEvent = null\n    this.receivedResp = null\n    this.sent = false\n    this.send()\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return\n    }\n    this.startTimeout()\n    this.sent = true\n    const status = this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel._joinRef(),\n    })\n    if (status === 'rate limited') {\n      this.rateLimited = true\n    }\n  }\n\n  updatePayload(payload: { [key: string]: any }): void {\n    this.payload = { ...this.payload, ...payload }\n  }\n\n  receive(status: string, callback: Function) {\n    if (this._hasReceived(status)) {\n      callback(this.receivedResp?.response)\n    }\n\n    this.recHooks.push({ status, callback })\n    return this\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return\n    }\n    this.ref = this.channel.socket._makeRef()\n    this.refEvent = this.channel._replyEventName(this.ref)\n\n    const callback = (payload: any) => {\n      this._cancelRefEvent()\n      this._cancelTimeout()\n      this.receivedResp = payload\n      this._matchReceive(payload)\n    }\n\n    this.channel._on(this.refEvent, {}, callback)\n\n    this.timeoutTimer = <any>setTimeout(() => {\n      this.trigger('timeout', {})\n    }, this.timeout)\n  }\n\n  trigger(status: string, response: any) {\n    if (this.refEvent)\n      this.channel._trigger(this.refEvent, { status, response })\n  }\n\n  destroy() {\n    this._cancelRefEvent()\n    this._cancelTimeout()\n  }\n\n  private _cancelRefEvent() {\n    if (!this.refEvent) {\n      return\n    }\n\n    this.channel._off(this.refEvent, {})\n  }\n\n  private _cancelTimeout() {\n    clearTimeout(this.timeoutTimer)\n    this.timeoutTimer = undefined\n  }\n\n  private _matchReceive({\n    status,\n    response,\n  }: {\n    status: string\n    response: Function\n  }) {\n    this.recHooks\n      .filter((h) => h.status === status)\n      .forEach((h) => h.callback(response))\n  }\n\n  private _hasReceived(status: string) {\n    return this.receivedResp && this.receivedResp.status === status\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}